// –û–±–Ω–æ–≤–∏—Ç–µ controllers/authController.js
const pool = require('../config/database');

const authController = {
  async telegramAuth(req, res) {
    console.log('üéØ authController.telegramAuth called');

    try {
      const { user, initData } = req.body;

      if (!user || !user.id) {
        return res.status(400).json({
          success: false,
          error: 'Invalid user data'
        });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      const checkUser = await pool.query(
        'SELECT * FROM users WHERE telegram_id = $1',
        [user.id.toString()]
      );

      let userData;
      let isNewUser = false;

      if (checkUser.rows.length === 0) {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —è–∑—ã–∫ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        let initialLanguage = 'en';
        if (user.language_code) {
          if (user.language_code === 'ru') {
            initialLanguage = 'ru';
          } else if (user.language_code === 'kk' || user.language_code === 'kz') {
            initialLanguage = 'kk';
          }
        }
        
        console.log(`Creating new user with language: ${initialLanguage}`);
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —è–∑—ã–∫–æ–º
        const insertUser = await pool.query(
          `INSERT INTO users (
             telegram_id, username, first_name, last_name, language, is_premium, photo_url
           ) VALUES ($1, $2, $3, $4, $5, $6, $7)
           RETURNING *`,
          [
            user.id.toString(),
            user.username || null,
            user.first_name || '',
            user.last_name || '',
            initialLanguage, // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∑—ã–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ Telegram
            false,
            user.photo_url || null
          ]
        );

        userData = insertUser.rows[0];
        isNewUser = true;
        
        console.log(`‚úÖ New user created with language: ${userData.language}`);
      } else {
        // –î–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ, –ù–û –ù–ï –Ø–ó–´–ö
        // –Ø–∑—ã–∫ –º–µ–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —è–≤–Ω–æ —á–µ—Ä–µ–∑ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        const updateUser = await pool.query(
          `UPDATE users SET
             username = $2,
             first_name = $3,
             last_name = $4,
             photo_url = $5
           WHERE telegram_id = $1
           RETURNING *`,
          [
            user.id.toString(),
            user.username || checkUser.rows[0].username,
            user.first_name || checkUser.rows[0].first_name,
            user.last_name || checkUser.rows[0].last_name,
            user.photo_url || checkUser.rows[0].photo_url
          ]
        );

        userData = updateUser.rows[0];
        
        console.log(`‚úÖ User logged in with language: ${userData.language}`);
      }

      // –í–ê–ñ–ù–û: –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      res.json({
        success: true,
        user: {
          ...userData,
          language: userData.language || 'en' // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ —è–∑—ã–∫–∞
        },
        isNewUser
      });
    } catch (error) {
      console.error('üí• Auth error:', error);
      res.status(500).json({
        success: false,
        error: 'Internal server error',
        details: process.env.NODE_ENV !== 'production' ? error.message : undefined
      });
    }
  }
};

module.exports = authController;
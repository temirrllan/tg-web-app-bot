const pool = require('../config/database');

const authController = {
  async telegramAuth(req, res) {
    console.log('üéØ authController.telegramAuth called');
    console.log('üì• Request body:', JSON.stringify(req.body, null, 2));

    try {
      const { user, initData } = req.body;

      if (!user || !user.id) {
        return res.status(400).json({
          success: false,
          error: 'Invalid user data'
        });
      }

      console.log('üë§ User data received:', {
        id: user.id,
        username: user.username,
        first_name: user.first_name,
        language_code: user.language_code,
        is_premium: user.is_premium
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      const checkUser = await pool.query(
        'SELECT * FROM users WHERE telegram_id = $1',
        [user.id.toString()]
      );

      let userData;
      let isNewUser = false;

      if (checkUser.rows.length === 0) {
        // –ù–û–í–´–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ - –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –ø–æ Telegram
        let initialLanguage = 'en'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –í–°–ï–ì–î–ê –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
        
        console.log(`üîç Detecting language from Telegram language_code: "${user.language_code}"`);
        
        if (user.language_code) {
          const langCode = String(user.language_code).toLowerCase().trim();
          console.log(`üìù Processing language code: "${langCode}"`);
          
          // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–æ–ª–µ–µ —Ç–æ—á–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞—á–∞–ª–æ —Å—Ç—Ä–æ–∫–∏
          if (langCode === 'ru' || langCode.startsWith('ru-') || langCode.startsWith('ru_')) {
            initialLanguage = 'ru';
            console.log('üá∑üá∫ Detected Russian');
          } else if (langCode === 'kk' || langCode === 'kz' || langCode.startsWith('kk-') || langCode.startsWith('kz-') || langCode.startsWith('kk_') || langCode.startsWith('kz_')) {
            initialLanguage = 'kk';
            console.log('üá∞üáø Detected Kazakh');
          } else if (langCode === 'en' || langCode.startsWith('en-') || langCode.startsWith('en_')) {
            // –í–ê–ñ–ù–û: –Ø–≤–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
            initialLanguage = 'en';
            console.log('üá¨üáß Detected English explicitly');
          } else {
            // –î–ª—è –õ–Æ–ë–û–ì–û –¥—Ä—É–≥–æ–≥–æ —è–∑—ã–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –∫–∞–∫ –¥–µ—Ñ–æ–ª—Ç
            initialLanguage = 'en';
            console.log(`üåç Language "${langCode}" not in supported list (ru, kk, en), using English as default`);
          }
        } else {
          // –ï—Å–ª–∏ language_code –≤–æ–æ–±—â–µ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
          console.log('‚ö†Ô∏è No language_code provided, using English as default');
          initialLanguage = 'en';
        }
        
        console.log(`‚úÖ Final language for new user: ${initialLanguage}`);
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —è–∑—ã–∫–æ–º
        const insertUser = await pool.query(
          `INSERT INTO users (
             telegram_id, username, first_name, last_name, language, is_premium, photo_url
           ) VALUES ($1, $2, $3, $4, $5, $6, $7)
           RETURNING *`,
          [
            user.id.toString(),
            user.username || null,
            user.first_name || '',
            user.last_name || '',
            initialLanguage, // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —è–∑—ã–∫
            false,
            user.photo_url || null
          ]
        );

        userData = insertUser.rows[0];
        isNewUser = true;
        
        console.log(`‚úÖ New user created:`, {
          id: userData.id,
          telegram_id: userData.telegram_id,
          language: userData.language,
          username: userData.username,
          is_new_user: isNewUser
        });
      } else {
        // –°–£–©–ï–°–¢–í–£–Æ–©–ò–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨
        // –ù–ï –º–µ–Ω—è–µ–º —è–∑—ã–∫! –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –≤ –ë–î
        userData = checkUser.rows[0];
        
        console.log(`üë§ Existing user found:`, {
          id: userData.id,
          telegram_id: userData.telegram_id,
          saved_language: userData.language,
          telegram_language: user.language_code,
          note: 'Using saved language from DB, NOT from Telegram'
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–ù–ï —è–∑—ã–∫!)
        const updateUser = await pool.query(
          `UPDATE users SET
             username = COALESCE($2, username),
             first_name = COALESCE($3, first_name),
             last_name = COALESCE($4, last_name),
             photo_url = COALESCE($5, photo_url)
           WHERE telegram_id = $1
           RETURNING *`,
          [
            user.id.toString(),
            user.username,
            user.first_name,
            user.last_name,
            user.photo_url
          ]
        );

        userData = updateUser.rows[0];
        
        console.log(`‚úÖ User data updated (language unchanged): ${userData.language}`);
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —è–∑—ã–∫ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
      if (!userData.language || !['en', 'ru', 'kk'].includes(userData.language)) {
        console.log(`‚ö†Ô∏è Invalid language in DB: "${userData.language}", setting to "en"`);
        
        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —è–∑—ã–∫ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
        const fixLanguage = await pool.query(
          'UPDATE users SET language = $1 WHERE id = $2 RETURNING language',
          ['en', userData.id]
        );
        
        userData.language = 'en';
        console.log('‚úÖ Language fixed to "en"');
      }

      // –í–ê–ñ–ù–û: –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
      const responseData = {
        success: true,
        user: {
          id: userData.id,
          telegram_id: userData.telegram_id,
          username: userData.username,
          first_name: userData.first_name,
          last_name: userData.last_name,
          language: userData.language, // –Ø–∑—ã–∫ –∏–∑ –ë–î
          is_premium: userData.is_premium,
          photo_url: userData.photo_url
        },
        isNewUser
      };
      
      console.log(`üì§ Sending response with language: "${responseData.user.language}" (isNewUser: ${isNewUser})`);
      res.json(responseData);
      
    } catch (error) {
      console.error('üí• Auth error:', error);
      res.status(500).json({
        success: false,
        error: 'Internal server error',
        details: process.env.NODE_ENV !== 'production' ? error.message : undefined
      });
    }
  }
};

module.exports = authController;
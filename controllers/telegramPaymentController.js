const TelegramStarsService = require('../services/telegramStarsService');
const db = require('../config/database');

const telegramPaymentController = {
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç Telegram
  async handleWebhook(req, res) {
    try {
      console.log('üì• ========== TELEGRAM PAYMENT WEBHOOK ==========');
      console.log('Headers:', JSON.stringify(req.headers, null, 2));
      console.log('Body:', JSON.stringify(req.body, null, 2));

      const update = req.body;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ successful_payment
      let payment = null;
      let from_user_id = null;

      // –í–∞—Ä–∏–∞–Ω—Ç 1: –í message
      if (update.message?.successful_payment) {
        payment = update.message.successful_payment;
        from_user_id = update.message.from.id;
        console.log('‚úÖ Found successful_payment in message');
      }
      // –í–∞—Ä–∏–∞–Ω—Ç 2: –í callback_query
      else if (update.callback_query?.message?.successful_payment) {
        payment = update.callback_query.message.successful_payment;
        from_user_id = update.callback_query.from.id;
        console.log('‚úÖ Found successful_payment in callback_query');
      }

      if (payment) {
        const paymentData = {
          telegram_payment_charge_id: payment.telegram_payment_charge_id,
          provider_payment_charge_id: payment.provider_payment_charge_id,
          invoice_payload: payment.invoice_payload,
          total_amount: payment.total_amount,
          currency: payment.currency,
          from_user_id: from_user_id
        };

        console.log('üí≥ Processing payment:', paymentData);

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂
        const result = await TelegramStarsService.processSuccessfulPayment(paymentData);

        if (result.success) {
          console.log('‚úÖ Payment processed successfully');
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
          try {
            const bot = require('../server').bot;
            
            // –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const userResult = await db.query(
              'SELECT language FROM users WHERE telegram_id = $1',
              [from_user_id.toString()]
            );
            
            const lang = userResult.rows.length > 0 ? userResult.rows[0].language : 'en';
            
            const message = lang === 'ru'
              ? 'üéâ <b>–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!</b>\n\n–í–∞—à–∞ Premium –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n\n–¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å:\n‚úÖ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏\n‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n–û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å! üí™'
              : 'üéâ <b>Payment successful!</b>\n\nYour Premium subscription is now active!\n\nYou now have:\n‚úÖ Unlimited habits\n‚úÖ Advanced statistics\n‚úÖ Priority support\n\nOpen the app and enjoy! üí™';
            
            await bot.sendMessage(from_user_id, message, {
              parse_mode: 'HTML',
              reply_markup: {
                inline_keyboard: [[
                  {
                    text: 'üì± Open App',
                    web_app: { 
                      url: process.env.WEBAPP_URL || process.env.FRONTEND_URL 
                    }
                  }
                ]]
              }
            });
            
            console.log('‚úÖ Confirmation message sent to user');
          } catch (botError) {
            console.error('Failed to send confirmation:', botError.message);
            // –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
          }

          return res.status(200).json({ success: true });
        } else {
          console.error('‚ùå Payment processing failed:', result.error);
          
          // –í—Å—ë —Ä–∞–≤–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 200 —á—Ç–æ–±—ã Telegram –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–ª –∑–∞–ø—Ä–æ—Å
          return res.status(200).json({ success: false, error: result.error });
        }
      }

      // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ successful_payment, –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ
      console.log('‚ÑπÔ∏è Not a payment update, acknowledging');
      res.status(200).json({ success: true, message: 'Update received' });

    } catch (error) {
      console.error('üí• Webhook error:', error);
      // –í–ê–ñ–ù–û: –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 200, –∏–Ω–∞—á–µ Telegram –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å –∑–∞–ø—Ä–æ—Å
      res.status(200).json({ success: false, error: error.message });
    }
  },

  // –û—Ç–ø—Ä–∞–≤–∏—Ç—å invoice –∫–Ω–æ–ø–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  async requestInvoiceButton(req, res) {
    try {
      const { planType } = req.body;
      const userId = req.user.id;

      console.log(`üì® Sending invoice button to user ${userId}, plan: ${planType}`);

      // –ü–æ–ª—É—á–∞–µ–º telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userResult = await db.query(
        'SELECT telegram_id, first_name FROM users WHERE id = $1',
        [userId]
      );

      if (userResult.rows.length === 0) {
        return res.status(404).json({
          success: false,
          error: 'User not found'
        });
      }

      const { telegram_id, first_name } = userResult.rows[0];

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω–∞ –∏ —Ü–µ–Ω—É
      const price = TelegramStarsService.getPlanPrice(planType);
      const plan = TelegramStarsService.PLANS[planType];

      if (!price || !plan) {
        return res.status(400).json({
          success: false,
          error: 'Invalid plan'
        });
      }

      console.log(`üí∞ Plan: ${plan.name}, Price: ${price} XTR`);

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º invoice payload
      const invoicePayload = TelegramStarsService.generateInvoicePayload(userId, planType);

      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ
      await TelegramStarsService.createPaymentRecord(userId, planType, invoicePayload, price);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º invoice —á–µ—Ä–µ–∑ –±–æ—Ç–∞
      const bot = require('../server').bot;

      try {
        await bot.sendInvoice(
          telegram_id,
          plan.name, // title
          plan.features.join('\n‚Ä¢ '), // description
          invoicePayload, // payload
          '', // provider_token (–ø—É—Å—Ç–æ–π –¥–ª—è Stars)
          'XTR', // currency
          [{ label: plan.name, amount: price }], // prices
          {
            photo_url: 'https://i.imgur.com/8QF3Z1M.png',
            photo_width: 512,
            photo_height: 512,
            need_name: false,
            need_phone_number: false,
            need_email: false,
            need_shipping_address: false,
            is_flexible: false,
            send_phone_number_to_provider: false,
            send_email_to_provider: false
          }
        );

        console.log('‚úÖ Invoice sent successfully');

        res.json({
          success: true,
          message: 'Invoice sent to user',
          invoicePayload: invoicePayload
        });

      } catch (botError) {
        console.error('‚ùå Failed to send invoice:', botError);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞
        if (botError.response?.statusCode === 403) {
          return res.status(403).json({
            success: false,
            error: 'User has blocked the bot',
            code: 'bot_blocked'
          });
        }

        throw botError;
      }

    } catch (error) {
      console.error('üí• Send invoice error:', error);
      res.status(500).json({
        success: false,
        error: 'Failed to send invoice'
      });
    }
  },

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –ø–æ payload
  async checkPaymentStatusByPayload(req, res) {
    try {
      const { payload } = req.query;
      
      if (!payload) {
        return res.status(400).json({
          success: false,
          error: 'Payload required'
        });
      }

      const result = await db.query(
        `SELECT 
          tp.*,
          s.is_active as subscription_active
         FROM telegram_payments tp
         LEFT JOIN subscriptions s ON s.telegram_payment_charge_id = tp.telegram_payment_charge_id
         WHERE tp.invoice_payload = $1
         ORDER BY tp.created_at DESC
         LIMIT 1`,
        [payload]
      );

      if (result.rows.length === 0) {
        return res.json({
          success: true,
          status: 'pending',
          paid: false
        });
      }

      const payment = result.rows[0];

      res.json({
        success: true,
        status: payment.status,
        paid: payment.status === 'completed',
        subscriptionActive: payment.subscription_active || false
      });

    } catch (error) {
      console.error('Check payment status error:', error);
      res.status(500).json({
        success: false,
        error: 'Failed to check status'
      });
    }
  }
};

module.exports = telegramPaymentController;
const TelegramStarsService = require('../services/telegramStarsService');
const db = require('../config/database');
const telegramPaymentController = {
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç Telegram
  async handleWebhook(req, res) {
    try {
      console.log('üì• Telegram webhook received');
      console.log('Body:', JSON.stringify(req.body, null, 2));

      const update = req.body;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ successful_payment
      if (update.message && update.message.successful_payment) {
        const payment = update.message.successful_payment;
        const from_user_id = update.message.from.id;

        const paymentData = {
          telegram_payment_charge_id: payment.telegram_payment_charge_id,
          provider_payment_charge_id: payment.provider_payment_charge_id,
          invoice_payload: payment.invoice_payload,
          total_amount: payment.total_amount,
          currency: payment.currency,
          from_user_id: from_user_id
        };

        console.log('üí≥ Processing payment:', paymentData);

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂
        const result = await TelegramStarsService.processSuccessfulPayment(paymentData);

        if (result.success) {
          console.log('‚úÖ Payment processed successfully');
          
          // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ –±–æ—Ç–∞
          try {
            const bot = require('../server').bot;
            await bot.sendMessage(
              from_user_id,
              'üéâ <b>Payment successful!</b>\n\nYour Premium subscription is now active. Enjoy unlimited habits!',
              { parse_mode: 'HTML' }
            );
          } catch (botError) {
            console.error('Failed to send confirmation message:', botError);
          }

          return res.status(200).json({ success: true });
        } else {
          console.error('‚ùå Payment processing failed:', result.error);
          
          // –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É Telegram, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
          return res.status(200).json({ success: false, error: result.error });
        }
      }

      // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ successful_payment, –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ
      res.status(200).json({ success: true });

    } catch (error) {
      console.error('üí• Webhook error:', error);
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º 200 —á—Ç–æ–±—ã Telegram –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–ª –∑–∞–ø—Ä–æ—Å
      res.status(200).json({ success: false, error: error.message });
    }
  },
// –û—Ç–ø—Ä–∞–≤–∏—Ç—å invoice –∫–Ω–æ–ø–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async requestInvoiceButton(req, res) {
  try {
    const { planType } = req.body;
    const userId = req.user.id;

    console.log(`üì® Sending invoice button to user ${userId}, plan: ${planType}`);

    // –ü–æ–ª—É—á–∞–µ–º telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userResult = await db.query(
      'SELECT telegram_id, first_name FROM users WHERE id = $1',
      [userId]
    );

    if (userResult.rows.length === 0) {
      return res.status(404).json({
        success: false,
        error: 'User not found'
      });
    }

    const { telegram_id, first_name } = userResult.rows[0];

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω–∞ –∏ —Ü–µ–Ω—É
    const price = TelegramStarsService.getPlanPrice(planType);
    const plan = TelegramStarsService.PLANS[planType];

    if (!price || !plan) {
      return res.status(400).json({
        success: false,
        error: 'Invalid plan'
      });
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º invoice payload
    const invoicePayload = TelegramStarsService.generateInvoicePayload(userId, planType);

    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ
    await TelegramStarsService.createPaymentRecord(userId, planType, invoicePayload, price);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º invoice —á–µ—Ä–µ–∑ –±–æ—Ç–∞
    const bot = require('../server').bot;

    try {
      await bot.sendInvoice(
        telegram_id,
        plan.name, // title
        plan.features.join('\n‚Ä¢ '), // description
        invoicePayload, // payload
        '', // provider_token (–ø—É—Å—Ç–æ–π –¥–ª—è Stars)
        'XTR', // currency
        [{ label: plan.name, amount: price }], // prices
        {
          photo_url: 'https://i.imgur.com/8QF3Z1M.png', // –ú–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—é –∫–∞—Ä—Ç–∏–Ω–∫—É
          photo_width: 512,
          photo_height: 512,
          need_name: false,
          need_phone_number: false,
          need_email: false,
          need_shipping_address: false,
          is_flexible: false,
          send_phone_number_to_provider: false,
          send_email_to_provider: false
        }
      );

      console.log('‚úÖ Invoice sent successfully');

      res.json({
        success: true,
        message: 'Invoice sent to user',
        invoicePayload: invoicePayload
      });

    } catch (botError) {
      console.error('‚ùå Failed to send invoice:', botError);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞
      if (botError.response?.statusCode === 403) {
        return res.status(403).json({
          success: false,
          error: 'User has blocked the bot',
          code: 'bot_blocked'
        });
      }

      throw botError;
    }

  } catch (error) {
    console.error('üí• Send invoice error:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to send invoice'
    });
  }
},

// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –ø–æ payload
async checkPaymentStatusByPayload(req, res) {
  try {
    const { payload } = req.query;
    
    if (!payload) {
      return res.status(400).json({
        success: false,
        error: 'Payload required'
      });
    }

    const result = await db.query(
      `SELECT 
        tp.*,
        s.is_active as subscription_active
       FROM telegram_payments tp
       LEFT JOIN subscriptions s ON s.telegram_payment_charge_id = tp.telegram_payment_charge_id
       WHERE tp.invoice_payload = $1
       ORDER BY tp.created_at DESC
       LIMIT 1`,
      [payload]
    );

    if (result.rows.length === 0) {
      return res.json({
        success: true,
        status: 'pending',
        paid: false
      });
    }

    const payment = result.rows[0];

    res.json({
      success: true,
      status: payment.status,
      paid: payment.status === 'completed',
      subscriptionActive: payment.subscription_active || false
    });

  } catch (error) {
    console.error('Check payment status error:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to check status'
    });
  }
},
  // –ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞—Ç–µ–∂ (—Å–æ–∑–¥–∞—Ç—å invoice)
  async createInvoice(req, res) {
    try {
      const { planType } = req.body;
      const userId = req.user.id;

      console.log(`Creating invoice for user ${userId}, plan: ${planType}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø–ª–∞–Ω–∞
      const price = TelegramStarsService.getPlanPrice(planType);
      if (!price) {
        return res.status(400).json({
          success: false,
          error: 'Invalid plan type'
        });
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π invoice_payload
      const invoicePayload = TelegramStarsService.generateInvoicePayload(userId, planType);

      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ –≤ –ë–î
      await TelegramStarsService.createPaymentRecord(userId, planType, invoicePayload, price);

      const plan = TelegramStarsService.PLANS[planType];

      // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è invoice
      const invoiceData = {
        title: plan.name,
        description: plan.features.join(', '),
        payload: invoicePayload,
        currency: 'XTR',
        prices: [{ label: plan.name, amount: price }]
      };

      console.log('Invoice data:', invoiceData);

      res.json({
        success: true,
        invoice: invoiceData
      });

    } catch (error) {
      console.error('Create invoice error:', error);
      res.status(500).json({
        success: false,
        error: 'Failed to create invoice'
      });
    }
  },

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
  async checkPaymentStatus(req, res) {
    try {
      const { paymentId } = req.params;
      
      const status = await TelegramStarsService.checkPaymentStatus(paymentId);
      
      if (!status) {
        return res.status(404).json({
          success: false,
          error: 'Payment not found'
        });
      }

      res.json({
        success: true,
        payment: status
      });

    } catch (error) {
      console.error('Check payment status error:', error);
      res.status(500).json({
        success: false,
        error: 'Failed to check payment status'
      });
    }
  }
};

module.exports = telegramPaymentController;
const TelegramStarsService = require('../services/telegramStarsService');
const SubscriptionService = require('../services/subscriptionService');

const subscriptionController = {
  /**
   * –°–æ–∑–¥–∞—Ç—å invoice –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Telegram Stars
   */
  async createInvoice(req, res) {
    try {
      const userId = req.user.id;
      const { planType, amount, description } = req.body;

      console.log('üìù Creating invoice:', { userId, planType, amount });

      // –í–∞–ª–∏–¥–∞—Ü–∏—è
      if (!planType || !amount) {
        return res.status(400).json({
          success: false,
          error: 'planType and amount are required'
        });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø–ª–∞–Ω–∞
      const plan = SubscriptionService.PLANS[planType];
      if (!plan) {
        return res.status(400).json({
          success: false,
          error: `Invalid plan type: ${planType}`
        });
      }

      // –°–æ–∑–¥–∞–µ–º invoice
      const invoiceData = await TelegramStarsService.createInvoice({
        userId,
        planType,
        amount,
        description: description || `Premium Subscription - ${plan.name}`
      });

      console.log('‚úÖ Invoice created:', invoiceData.invoiceId);

      res.json({
        success: true,
        ...invoiceData
      });
    } catch (error) {
      console.error('‚ùå Create invoice error:', error);
      res.status(500).json({
        success: false,
        error: error.message || 'Failed to create invoice'
      });
    }
  },

  /**
   * Webhook –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π –æ—Ç Telegram
   */
  async handlePaymentWebhook(req, res) {
    try {
      const { invoice_payload, telegram_payment_charge_id } = req.body;

      console.log('üí≥ Payment webhook received:', {
        invoice_payload,
        telegram_payment_charge_id
      });

      if (!invoice_payload || !telegram_payment_charge_id) {
        return res.status(400).json({
          success: false,
          error: 'Invalid webhook data'
        });
      }

      // –ü–∞—Ä—Å–∏–º payload
      const payload = JSON.parse(invoice_payload);
      const { invoiceId, userId, planType } = payload;

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂
      const result = await TelegramStarsService.processSuccessfulPayment({
        invoiceId,
        transactionId: telegram_payment_charge_id,
        telegramPaymentId: telegram_payment_charge_id
      });

      if (result.success) {
        console.log('‚úÖ Payment processed successfully');
        res.json({ success: true });
      } else {
        console.log('‚ö†Ô∏è Payment processing failed:', result.message);
        res.status(400).json({
          success: false,
          error: result.message
        });
      }
    } catch (error) {
      console.error('‚ùå Payment webhook error:', error);
      res.status(500).json({
        success: false,
        error: error.message || 'Webhook processing failed'
      });
    }
  },

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
   */
  async checkPaymentStatus(req, res) {
    try {
      const { invoiceId } = req.params;
      const userId = req.user.id;

      console.log('üîç Checking payment status:', { invoiceId, userId });

      const result = await TelegramStarsService.checkPaymentStatus(invoiceId);

      res.json(result);
    } catch (error) {
      console.error('‚ùå Check payment status error:', error);
      res.status(500).json({
        success: false,
        error: error.message || 'Failed to check payment status'
      });
    }
  },

  /**
   * –ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥
   */
  async applyPromoCode(req, res) {
    try {
      const userId = req.user.id;
      const { promoCode } = req.body;

      console.log('üéüÔ∏è Applying promo code:', { userId, promoCode });

      if (!promoCode || !promoCode.trim()) {
        return res.status(400).json({
          success: false,
          error: 'Promo code is required'
        });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const db = require('../config/database');
      const result = await db.query(
        `SELECT code, discount_percent 
         FROM promo_codes 
         WHERE code = $1 
         AND is_active = true 
         AND (expires_at IS NULL OR expires_at > CURRENT_TIMESTAMP)`,
        [promoCode.toUpperCase()]
      );

      if (result.rows.length === 0) {
        return res.status(404).json({
          success: false,
          error: 'Invalid or expired promo code'
        });
      }

      const promo = result.rows[0];

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ —Ä–∞–Ω—å—à–µ
      const usageCheck = await db.query(
        `SELECT id FROM promo_code_usage 
         WHERE user_id = $1 AND promo_code = $2`,
        [userId, promo.code]
      );

      if (usageCheck.rows.length > 0) {
        return res.status(400).json({
          success: false,
          error: 'You have already used this promo code'
        });
      }

      console.log('‚úÖ Promo code valid:', promo);

      res.json({
        success: true,
        discount: {
          code: promo.code,
          discount_percent: promo.discount_percent
        }
      });
    } catch (error) {
      console.error('‚ùå Apply promo code error:', error);
      res.status(500).json({
        success: false,
        error: error.message || 'Failed to apply promo code'
      });
    }
  },

  /**
   * –û—Ç–º–µ–Ω–∏—Ç—å –ø–ª–∞—Ç–µ–∂
   */
  async cancelPayment(req, res) {
    try {
      const { invoiceId } = req.params;
      const userId = req.user.id;

      console.log('üö´ Cancelling payment:', { invoiceId, userId });

      const result = await TelegramStarsService.cancelPayment(invoiceId);

      res.json(result);
    } catch (error) {
      console.error('‚ùå Cancel payment error:', error);
      res.status(500).json({
        success: false,
        error: error.message || 'Failed to cancel payment'
      });
    }
  },

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async getPaymentHistory(req, res) {
    try {
      const userId = req.user.id;

      console.log('üìã Getting payment history for user:', userId);

      const result = await TelegramStarsService.getUserPayments(userId);

      res.json(result);
    } catch (error) {
      console.error('‚ùå Get payment history error:', error);
      res.status(500).json({
        success: false,
        error: error.message || 'Failed to get payment history'
      });
    }
  }
};

module.exports = subscriptionController;
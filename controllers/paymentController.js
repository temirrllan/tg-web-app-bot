const SubscriptionService = require('../services/subscriptionService');
const PromoCodeService = require('../services/promoCodeService');
const TelegramStarsService = require('../services/telegramStarsService');

const paymentController = {
  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
   */
  async validatePromoCode(req, res) {
    try {
      const { code, planType } = req.body;
      const userId = req.user.id;
      
      if (!code || !planType) {
        return res.status(400).json({
          success: false,
          error: 'Code and plan type are required'
        });
      }
      
      const validation = await PromoCodeService.validatePromoCode(code, userId, planType);
      
      if (!validation.valid) {
        return res.status(400).json({
          success: false,
          error: validation.error
        });
      }
      
      // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –ø–ª–∞–Ω–∞
      const plan = SubscriptionService.PLANS[planType];
      if (!plan) {
        return res.status(400).json({
          success: false,
          error: 'Invalid plan type'
        });
      }
      
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–∏–¥–∫—É
      const pricing = PromoCodeService.calculateDiscountedPrice(
        plan.price_stars,
        validation.discountPercent,
        validation.discountStars
      );
      
      res.json({
        success: true,
        valid: true,
        promoId: validation.promoId,
        pricing: {
          originalPrice: pricing.originalPrice,
          finalPrice: pricing.finalPrice,
          discount: pricing.discount,
          discountPercent: validation.discountPercent
        },
        bonusDays: validation.bonusDays
      });
    } catch (error) {
      console.error('Validate promo error:', error);
      res.status(500).json({
        success: false,
        error: 'Failed to validate promo code'
      });
    }
  },

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
   */
  async createPayment(req, res) {
    try {
      const { planType, promoCode } = req.body;
      const userId = req.user.id;
      const telegramId = req.user.telegram_id;
      
      console.log(`üí≥ Creating payment for user ${userId}, plan ${planType}`);
      
      // –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω
      const plan = SubscriptionService.PLANS[planType];
      if (!plan) {
        return res.status(400).json({
          success: false,
          error: 'Invalid plan type'
        });
      }
      
      let finalPrice = plan.price_stars;
      let promoId = null;
      let bonusDays = null;
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
      if (promoCode) {
        const validation = await PromoCodeService.validatePromoCode(promoCode, userId, planType);
        
        if (validation.valid) {
          const pricing = PromoCodeService.calculateDiscountedPrice(
            plan.price_stars,
            validation.discountPercent,
            validation.discountStars
          );
          
          finalPrice = pricing.finalPrice;
          promoId = validation.promoId;
          bonusDays = validation.bonusDays;
          
          console.log(`üé´ Promo code applied: ${finalPrice} stars (was ${plan.price_stars})`);
        }
      }
      
      // –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å —á–µ—Ä–µ–∑ Telegram
      const invoice = await TelegramStarsService.createInvoice(
        telegramId,
        planType,
        finalPrice,
        plan.name
      );
      
      if (!invoice.success) {
        throw new Error('Failed to create invoice');
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ pending –ø–ª–∞—Ç–µ–∂–µ
      // (–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É pending_payments)
      
      res.json({
        success: true,
        invoice: invoice.invoiceUrl,
        amount: finalPrice,
        planType,
        promoApplied: !!promoId
      });
    } catch (error) {
      console.error('Create payment error:', error);
      res.status(500).json({
        success: false,
        error: 'Failed to create payment'
      });
    }
  },

  /**
   * Webhook –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –æ—Ç Telegram
   */
  async handlePaymentWebhook(req, res) {
    try {
      const { successful_payment } = req.body.message || {};
      
      if (!successful_payment) {
        return res.sendStatus(400);
      }
      
      console.log('üí∞ Received payment webhook:', successful_payment);
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂
      const payment = await TelegramStarsService.handleSuccessfulPayment(successful_payment);
      
      if (!payment.success) {
        throw new Error('Payment processing failed');
      }
      
      const { userId, planType, amount, transactionId } = payment;
      
      // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
      const subscription = await SubscriptionService.createSubscription(
        userId,
        planType,
        transactionId
      );
      
      if (!subscription.success) {
        throw new Error('Failed to activate subscription');
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      const db = require('../config/database');
      const userResult = await db.query(
        'SELECT telegram_id FROM users WHERE id = $1',
        [userId]
      );
      
      if (userResult.rows.length > 0) {
        const telegramId = userResult.rows[0].telegram_id;
        await TelegramStarsService.sendSubscriptionConfirmation(
          telegramId,
          planType,
          subscription.subscription.expires_at
        );
      }
      
      res.sendStatus(200);
    } catch (error) {
      console.error('Payment webhook error:', error);
      res.sendStatus(500);
    }
  },

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏ Stars
   */
  async getBuyStarsLink(req, res) {
    try {
      const link = TelegramStarsService.getBuyStarsLink();
      
      res.json({
        success: true,
        link
      });
    } catch (error) {
      console.error('Get buy stars link error:', error);
      res.status(500).json({
        success: false,
        error: 'Failed to get link'
      });
    }
  }
};

module.exports = paymentController;
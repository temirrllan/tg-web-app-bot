const TelegramStarsService = require('../services/telegramStarsService');
const db = require('../config/database');

async function testPaymentFlow() {
  console.log('üß™ Testing payment flow (dry run)...\n');
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞–Ω–æ–≤
    console.log('1Ô∏è‚É£ Checking subscription plans...');
    const plans = TelegramStarsService.PLANS;
    
     Object.entries(plans).forEach(([key, plan]) => {
      const price = TelegramStarsService.getPlanPrice(key);
      console.log(`  ‚úÖ ${plan.name}: ${price} XTR`);
    });
    console.log('');
    
   // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ payload
    console.log('2Ô∏è‚É£ Testing payload generation...');
    const testUserId = 999999;
    const testPlanType = '6_months';
    const payload = TelegramStarsService.generateInvoicePayload(testUserId, testPlanType);
    console.log(`  ‚úÖ Generated payload: ${payload}`);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ payload —Å –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–æ–π
    const parsed = TelegramStarsService.parseInvoicePayload(payload);
    
    console.log(`  Debug: Parsed user ID: "${parsed.userId}" vs Expected: "${testUserId}"`);
    console.log(`  Debug: Parsed plan: "${parsed.planType}" vs Expected: "${testPlanType}"`);
    
    // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    if (String(parsed.userId) === String(testUserId) && parsed.planType === testPlanType) {
      console.log(`  ‚úÖ Payload parsing works correctly`);
    } else {
      console.log(`  ‚ùå Payload parsing failed!`);
      console.log(`     Expected: userId=${testUserId}, plan=${testPlanType}`);
      console.log(`     Got: userId=${parsed.userId}, plan=${parsed.planType}`);
      process.exit(1);
    }
    console.log('');
    
    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –æ –ø–ª–∞—Ç–µ–∂–µ (—Å –æ—Ç–∫–∞—Ç–æ–º)
    console.log('3Ô∏è‚É£ Testing payment record creation (will rollback)...');
    
    // –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userResult = await db.query(`
      INSERT INTO users (telegram_id, first_name, language, is_premium)
      VALUES ('test_payment_user', 'Test User', 'en', false)
      ON CONFLICT (telegram_id) DO UPDATE SET first_name = 'Test User'
      RETURNING id
    `);
    const userId = userResult.rows[0].id;
    console.log(`  ‚úÖ Created test user: ID ${userId}`);
    
    try {
      const price = TelegramStarsService.getPlanPrice(testPlanType);
      const paymentPayload = TelegramStarsService.generateInvoicePayload(userId, testPlanType);
      
      await TelegramStarsService.createPaymentRecord(userId, testPlanType, paymentPayload, price);
      console.log(`  ‚úÖ Payment record created successfully`);
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∑–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞
      const checkPayment = await db.query(
        'SELECT * FROM telegram_payments WHERE user_id = $1 AND invoice_payload = $2',
        [userId, paymentPayload]
      );
      
      if (checkPayment.rows.length > 0) {
        console.log(`  ‚úÖ Payment record verified in database`);
        console.log(`     Status: ${checkPayment.rows[0].status}`);
        console.log(`     Amount: ${checkPayment.rows[0].total_amount} XTR`);
      } else {
        console.log(`  ‚ùå Payment record not found in database!`);
      }
      
    } finally {
      // –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      await db.query('DELETE FROM telegram_payments WHERE user_id = $1', [userId]);
      await db.query('DELETE FROM users WHERE id = $1', [userId]);
      console.log(`  ‚úÖ Test data cleaned up`);
    }
    console.log('');
    
    // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ (dry run)
    console.log('4Ô∏è‚É£ Testing successful payment processing (dry run)...');
    
    // –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
    const fullTestUser = await db.query(`
      INSERT INTO users (telegram_id, first_name, language, is_premium)
      VALUES ('123456789', 'Test Full User', 'en', false)
      ON CONFLICT (telegram_id) DO UPDATE SET first_name = 'Test Full User'
      RETURNING id
    `);
    const fullUserId = fullTestUser.rows[0].id;
    
    try {
      const fullPayload = TelegramStarsService.generateInvoicePayload(fullUserId, testPlanType);
      const fullPrice = TelegramStarsService.getPlanPrice(testPlanType);
      
      console.log(`  Creating payment record for user ${fullUserId}...`);
      
      // –°–æ–∑–¥–∞—ë–º payment record
      await TelegramStarsService.createPaymentRecord(fullUserId, testPlanType, fullPayload, fullPrice);
      
      // –°–∏–º—É–ª–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç—ë–∂
      const paymentData = {
        telegram_payment_charge_id: 'test_charge_' + Date.now(),
        provider_payment_charge_id: 'test_provider_' + Date.now(),
        invoice_payload: fullPayload,
        total_amount: fullPrice,
        currency: 'XTR',
        from_user_id: 123456789
      };
      
      console.log(`  Processing simulated payment...`);
      
      const result = await TelegramStarsService.processSuccessfulPayment(paymentData);
      
      if (result.success) {
        console.log(`  ‚úÖ Payment processed successfully`);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∞–ª premium
        const userCheck = await db.query(
          'SELECT is_premium, subscription_type, subscription_expires_at FROM users WHERE id = $1',
          [fullUserId]
        );
        
        const user = userCheck.rows[0];
        
        if (user.is_premium) {
          console.log(`  ‚úÖ User is now premium`);
          console.log(`     Subscription type: ${user.subscription_type}`);
          console.log(`     Expires at: ${user.subscription_expires_at || 'Lifetime'}`);
        } else {
          console.log(`  ‚ùå User is not premium after payment!`);
          console.log(`     is_premium: ${user.is_premium}`);
          console.log(`     subscription_type: ${user.subscription_type}`);
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
        const subCheck = await db.query(
          'SELECT id, plan_type, is_active, started_at, expires_at FROM subscriptions WHERE user_id = $1 AND is_active = true',
          [fullUserId]
        );
        
        if (subCheck.rows.length > 0) {
          console.log(`  ‚úÖ Subscription created in database`);
          const sub = subCheck.rows[0];
          console.log(`     ID: ${sub.id}`);
          console.log(`     Plan: ${sub.plan_type}`);
          console.log(`     Active: ${sub.is_active}`);
          console.log(`     Started: ${sub.started_at}`);
          console.log(`     Expires: ${sub.expires_at || 'Lifetime'}`);
        } else {
          console.log(`  ‚ùå Subscription not found in database!`);
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
        const historyCheck = await db.query(
          'SELECT action, plan_type, price_stars FROM subscription_history WHERE user_id = $1',
          [fullUserId]
        );
        
        if (historyCheck.rows.length > 0) {
          console.log(`  ‚úÖ History record created`);
          console.log(`     Action: ${historyCheck.rows[0].action}`);
        } else {
          console.log(`  ‚ö†Ô∏è No history record found (optional)`);
        }
        
      } else {
        console.log(`  ‚ùå Payment processing failed: ${result.error}`);
        throw new Error(result.error);
      }
      
    } catch (error) {
      console.error(`  ‚ùå Test failed with error:`, error.message);
      throw error;
    } finally {
      // –û—á–∏—Å—Ç–∫–∞
      console.log(`  Cleaning up test data...`);
      await db.query('DELETE FROM subscription_history WHERE user_id = $1', [fullUserId]);
      await db.query('DELETE FROM subscriptions WHERE user_id = $1', [fullUserId]);
      await db.query('DELETE FROM telegram_payments WHERE user_id = $1', [fullUserId]);
      await db.query('DELETE FROM users WHERE id = $1', [fullUserId]);
      console.log(`  ‚úÖ Test data cleaned up`);
    }
    console.log('');
    
    // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—â–∏—Ç—ã –æ—Ç –¥—É–±–ª–µ–π
    console.log('5Ô∏è‚É£ Testing duplicate payment protection...');
    
    const dupUser = await db.query(`
      INSERT INTO users (telegram_id, first_name, language, is_premium)
      VALUES ('987654321', 'Duplicate Test', 'en', false)
      ON CONFLICT (telegram_id) DO UPDATE SET first_name = 'Duplicate Test'
      RETURNING id
    `);
    const dupUserId = dupUser.rows[0].id;
    
    try {
      const dupPayload = TelegramStarsService.generateInvoicePayload(dupUserId, testPlanType);
      const dupPrice = TelegramStarsService.getPlanPrice(testPlanType);
      const dupChargeId = 'dup_charge_' + Date.now();
      
      // –ü–µ—Ä–≤—ã–π –ø–ª–∞—Ç—ë–∂
      const paymentData1 = {
        telegram_payment_charge_id: dupChargeId,
        provider_payment_charge_id: 'dup_provider_1',
        invoice_payload: dupPayload,
        total_amount: dupPrice,
        currency: 'XTR',
        from_user_id: 987654321
      };
      
      await TelegramStarsService.createPaymentRecord(dupUserId, testPlanType, dupPayload, dupPrice);
      const result1 = await TelegramStarsService.processSuccessfulPayment(paymentData1);
      
      if (!result1.success) {
        throw new Error('First payment failed: ' + result1.error);
      }
      
      console.log(`  ‚úÖ First payment processed`);
      
      // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ —Å —Ç–µ–º –∂–µ charge_id
      const paymentData2 = {
        telegram_payment_charge_id: dupChargeId, // –¢–æ—Ç –∂–µ ID
        provider_payment_charge_id: 'dup_provider_2',
        invoice_payload: dupPayload,
        total_amount: dupPrice,
        currency: 'XTR',
        from_user_id: 987654321
      };
      
      const result2 = await TelegramStarsService.processSuccessfulPayment(paymentData2);
      
      if (result2.duplicate || result2.success) {
        console.log(`  ‚úÖ Duplicate payment detected and handled correctly`);
      } else {
        console.log(`  ‚ùå Duplicate payment was processed again!`);
        throw new Error('Duplicate protection failed');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–∑–¥–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞
      const subCount = await db.query(
        'SELECT COUNT(*) FROM subscriptions WHERE user_id = $1',
        [dupUserId]
      );
      
      const count = parseInt(subCount.rows[0].count);
      if (count === 1) {
        console.log(`  ‚úÖ Only one subscription created (duplicate prevented)`);
      } else {
        console.log(`  ‚ùå Found ${count} subscriptions (should be 1)`);
        throw new Error('Duplicate subscriptions created');
      }
      
    } finally {
      await db.query('DELETE FROM subscription_history WHERE user_id = $1', [dupUserId]);
      await db.query('DELETE FROM subscriptions WHERE user_id = $1', [dupUserId]);
      await db.query('DELETE FROM telegram_payments WHERE user_id = $1', [dupUserId]);
      await db.query('DELETE FROM users WHERE id = $1', [dupUserId]);
      console.log(`  ‚úÖ Test data cleaned up`);
    }
    console.log('');
    
    console.log('‚úÖ All payment flow tests passed!\n');
    console.log('üéâ Payment system is ready for production!\n');
    console.log('Summary:');
    console.log('  ‚úÖ Payment plans configured correctly');
    console.log('  ‚úÖ Payload generation working');
    console.log('  ‚úÖ Payment records created successfully');
    console.log('  ‚úÖ Payment processing working');
    console.log('  ‚úÖ User premium status updated');
    console.log('  ‚úÖ Subscriptions created correctly');
    console.log('  ‚úÖ Duplicate protection working');
    console.log('');
    console.log('Next steps:');
    console.log('  1. Test real payment with 1 XTR');
    console.log('  2. Verify Stars are received');
    console.log('  3. Monitor logs for any issues');
    console.log('');
    
    process.exit(0);
    
  } catch (error) {
    console.error('\n‚ùå Payment flow test failed:', error.message);
    if (error.stack) {
      console.error('\nStack trace:');
      console.error(error.stack);
    }
    process.exit(1);
  }
}

testPaymentFlow();
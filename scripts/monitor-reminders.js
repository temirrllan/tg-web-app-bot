const db = require('../config/database');

async function monitorReminders() {
  try {
    console.log('üìä –ú–û–ù–ò–¢–û–†–ò–ù–ì –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ô\n');
    console.log('=' .repeat(50));
    
    const now = new Date();
    const currentTime = `${String(now.getHours()).padStart(2, '0')}:${String(now.getMinutes()).padStart(2, '0')}`;
    const currentDay = now.getDay() || 7;
    
    console.log(`‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: ${currentTime}`);
    console.log(`üìÖ –¢–µ–∫—É—â–∏–π –¥–µ–Ω—å: ${currentDay} (${['–í—Å','–ü–Ω','–í—Ç','–°—Ä','–ß—Ç','–ü—Ç','–°–±'][now.getDay()]})\n`);
    
    // –ü—Ä–∏–≤—ã—á–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –≤ —ç—Ç—É –º–∏–Ω—É—Ç—É
    const nowReminders = await db.query(`
      SELECT 
        h.title,
        h.reminder_time,
        u.first_name,
        u.telegram_id
      FROM habits h
      JOIN users u ON h.user_id = u.id
      WHERE h.reminder_enabled = true
      AND h.is_active = true
      AND h.reminder_time = $1
      AND $2 = ANY(h.schedule_days)
    `, [`${currentTime}:00`, currentDay]);
    
    if (nowReminders.rows.length > 0) {
      console.log('üîî –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø –°–ï–ô–ß–ê–°:');
      for (const r of nowReminders.rows) {
        console.log(`   ‚Ä¢ "${r.title}" –¥–ª—è ${r.first_name} (TG: ${r.telegram_id})`);
      }
    } else {
      console.log('üì≠ –ù–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–∞ —Ç–µ–∫—É—â—É—é –º–∏–Ω—É—Ç—É');
    }
    
    // –°–ª–µ–¥—É—é—â–∏–µ 5 –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    console.log('\nüìã –ë–õ–ò–ñ–ê–ô–®–ò–ï –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø:');
    const upcoming = await db.query(`
      SELECT 
        h.title,
        h.reminder_time,
        h.schedule_days,
        u.first_name
      FROM habits h
      JOIN users u ON h.user_id = u.id
      WHERE h.reminder_enabled = true
      AND h.is_active = true
      AND h.reminder_time > $1
      ORDER BY h.reminder_time
      LIMIT 5
    `, [`${currentTime}:00`]);
    
    if (upcoming.rows.length > 0) {
      for (const r of upcoming.rows) {
        const willSendToday = r.schedule_days.includes(currentDay);
        const todayMark = willSendToday ? '‚úÖ' : '‚ùå';
        console.log(`   ${todayMark} ${r.reminder_time.substring(0, 5)} - "${r.title}" (${r.first_name})`);
      }
    } else {
      console.log('   –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π');
    }
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const stats = await db.query(`
      SELECT 
        COUNT(DISTINCT h.id) as total_habits,
        COUNT(DISTINCT CASE WHEN h.reminder_enabled THEN h.id END) as with_reminders,
        COUNT(DISTINCT u.id) as total_users
      FROM habits h
      JOIN users u ON h.user_id = u.id
      WHERE h.is_active = true
    `);
    
    console.log('\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
    console.log(`   –í—Å–µ–≥–æ –ø—Ä–∏–≤—ã—á–µ–∫: ${stats.rows[0].total_habits}`);
    console.log(`   –° –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏: ${stats.rows[0].with_reminders}`);
    console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.rows[0].total_users}`);
    
    process.exit(0);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    process.exit(1);
  }
}

monitorReminders();
const db = require('../config/database');
const fs = require('fs');
const path = require('path');

async function initDatabase() {
  try {
    console.log('üöÄ Initializing database...');

    // –û–ø—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
    const dropExisting = process.argv.includes('--drop');
    
    if (dropExisting) {
      console.log('‚ö†Ô∏è  Dropping existing tables...');
      await dropTables();
    }

    // –ß–∏—Ç–∞–µ–º SQL —Ñ–∞–π–ª
    const sqlPath = path.join(__dirname, 'schema.sql');
    const sql = fs.readFileSync(sqlPath, 'utf8');

    // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    const commands = sql
      .split(';')
      .map(cmd => cmd.trim())
      .filter(cmd => cmd.length > 0);

    // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã –ø–æ –æ–¥–Ω–æ–π
    for (const command of commands) {
      try {
        await db.query(command + ';');
      } catch (error) {
        if (error.code === '42P07') { // –¢–∞–±–ª–∏—Ü–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
          console.log(`‚ö†Ô∏è  Table already exists, skipping...`);
        } else if (error.code === '23505') { // –î—É–±–ª–∏–∫–∞—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
          console.log(`‚ö†Ô∏è  Duplicate value, skipping...`);
        } else {
          throw error;
        }
      }
    }

    console.log('‚úÖ Database initialized successfully!');
    process.exit(0);
  } catch (error) {
    console.error('‚ùå Database initialization failed:', error);
    process.exit(1);
  }
}

async function dropTables() {
  const tables = [
    'reminder_history',
    'habit_marks',
    'subscriptions',
    'habits',
    'motivational_phrases',
    'categories'
    // users –Ω–µ —É–¥–∞–ª—è–µ–º, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  ];

  for (const table of tables) {
    try {
      await db.query(`DROP TABLE IF EXISTS ${table} CASCADE`);
      console.log(`  Dropped table: ${table}`);
    } catch (error) {
      console.error(`  Failed to drop ${table}:`, error.message);
    }
  }
}

initDatabase();
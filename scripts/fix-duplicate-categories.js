const db = require('../config/database');

async function fixDuplicateCategories() {
  try {
    console.log('üîç Checking for duplicate categories...');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const result = await db.query(`
      SELECT name_en, COUNT(*) as count, MIN(id) as keep_id
      FROM categories
      GROUP BY name_en
      HAVING COUNT(*) > 1
    `);
    
    if (result.rows.length === 0) {
      console.log('‚úÖ No duplicate categories found');
      return;
    }
    
    console.log(`Found ${result.rows.length} duplicate category names`);
    
    // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–∏ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º ID
    for (const row of result.rows) {
      console.log(`Fixing duplicates for: ${row.name_en}`);
      
      // –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–≤—ã—á–∫–∏, —á—Ç–æ–±—ã –æ–Ω–∏ —Å—Å—ã–ª–∞–ª–∏—Å—å –Ω–∞ –æ—Å–Ω–æ–≤–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
      await db.query(`
        UPDATE habits 
        SET category_id = $1 
        WHERE category_id IN (
          SELECT id FROM categories 
          WHERE name_en = $2 AND id != $1
        )
      `, [row.keep_id, row.name_en]);
      
      // –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
      const deleteResult = await db.query(`
        DELETE FROM categories 
        WHERE name_en = $1 AND id != $2
      `, [row.name_en, row.keep_id]);
      
      console.log(`  Deleted ${deleteResult.rowCount} duplicates`);
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    const finalCategories = await db.query('SELECT * FROM categories ORDER BY sort_order');
    console.log(`\n‚úÖ Fixed! Now have ${finalCategories.rows.length} categories`);
    
    process.exit(0);
  } catch (error) {
    console.error('‚ùå Error:', error);
    process.exit(1);
  }
}

fixDuplicateCategories();
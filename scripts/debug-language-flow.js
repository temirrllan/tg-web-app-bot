    // scripts/debug-language-flow.js
// –ó–∞–ø—É—Å—Ç–∏—Ç–µ: node scripts/debug-language-flow.js

const db = require('../config/database');

async function debugLanguageFlow() {
  console.log('\nüîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –Ø–ó–´–ö–ê\n');
  console.log('=' .repeat(60));
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö —è–∑—ã–∫–∏
    console.log('\nüìä 1. –¢–ï–ö–£–©–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –í –ë–î:\n');
    const users = await db.query(`
      SELECT 
        id,
        telegram_id,
        username,
        first_name,
        language,
        created_at,
        updated_at
      FROM users
      ORDER BY created_at DESC
      LIMIT 10
    `);
    
    if (users.rows.length === 0) {
      console.log('‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    } else {
      users.rows.forEach(user => {
        console.log(`User ID: ${user.id}`);
        console.log(`  Telegram ID: ${user.telegram_id}`);
        console.log(`  Name: ${user.first_name} (@${user.username || 'no username'})`);
        console.log(`  Language: ${user.language} ${getLanguageEmoji(user.language)}`);
        console.log(`  Created: ${user.created_at}`);
        console.log('');
      });
    }
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–æ–Ω–∫—É language
    console.log('\nüìä 2. –ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ –¢–ê–ë–õ–ò–¶–´:\n');
    const columnInfo = await db.query(`
      SELECT 
        column_name,
        data_type,
        column_default,
        is_nullable
      FROM information_schema.columns
      WHERE table_name = 'users' 
      AND column_name = 'language'
    `);
    
    if (columnInfo.rows.length > 0) {
      const col = columnInfo.rows[0];
      console.log(`Column 'language' info:`);
      console.log(`  Type: ${col.data_type}`);
      console.log(`  Default: ${col.column_default || 'NULL'}`);
      console.log(`  Nullable: ${col.is_nullable}`);
      
      if (col.column_default && col.column_default.includes('ru')) {
        console.log('\n‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–ê –ù–ê–ô–î–ï–ù–ê: –ö–æ–ª–æ–Ω–∫–∞ language –∏–º–µ–µ—Ç DEFAULT –∑–Ω–∞—á–µ–Ω–∏–µ "ru"!');
        console.log('  –≠—Ç–æ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å!');
      }
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —è–∑—ã–∫–æ–≤
    console.log('\nüìä 3. –°–¢–ê–¢–ò–°–¢–ò–ö–ê –Ø–ó–´–ö–û–í:\n');
    const stats = await db.query(`
      SELECT 
        language,
        COUNT(*) as count
      FROM users
      GROUP BY language
      ORDER BY count DESC
    `);
    
    stats.rows.forEach(stat => {
      console.log(`  ${stat.language}: ${stat.count} users ${getLanguageEmoji(stat.language)}`);
    });
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    console.log('\nüìä 4. –ü–û–°–õ–ï–î–ù–ò–ï –°–û–ó–î–ê–ù–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò:\n');
    const lastUsers = await db.query(`
      SELECT 
        telegram_id,
        first_name,
        language,
        created_at
      FROM users
      ORDER BY created_at DESC
      LIMIT 5
    `);
    
    lastUsers.rows.forEach(user => {
      const created = new Date(user.created_at);
      const now = new Date();
      const diffMinutes = Math.floor((now - created) / 60000);
      
      console.log(`${user.first_name} (${user.telegram_id})`);
      console.log(`  Language: ${user.language} ${getLanguageEmoji(user.language)}`);
      console.log(`  Created: ${diffMinutes} minutes ago`);
      console.log('');
    });
    
    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º DEFAULT –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å—Ö–µ–º–µ –ë–î
    console.log('\nüìä 5. –ü–†–û–í–ï–†–ö–ê DEFAULT –ó–ù–ê–ß–ï–ù–ò–ô:\n');
    const constraints = await db.query(`
      SELECT 
        conname,
        pg_get_constraintdef(oid) as definition
      FROM pg_constraint
      WHERE conrelid = 'users'::regclass
      AND contype = 'd'
    `);
    
    if (constraints.rows.length > 0) {
      console.log('Default constraints:');
      constraints.rows.forEach(c => {
        console.log(`  ${c.conname}: ${c.definition}`);
        if (c.definition.includes("'ru'")) {
          console.log('  ‚ö†Ô∏è –ù–ê–ô–î–ï–ù DEFAULT "ru"!');
        }
      });
    } else {
      console.log('No default constraints found');
    }
    
    console.log('\n' + '=' .repeat(60));
    console.log('\nüîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n');
    
    // –î–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    console.log('1. –í—ã–ø–æ–ª–Ω–∏—Ç–µ SQL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏/–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è DEFAULT:');
    console.log(`   ALTER TABLE users ALTER COLUMN language SET DEFAULT 'en';`);
    console.log('');
    console.log('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    console.log('');
    console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ –Ω–µ—Ç –∂–µ—Å—Ç–∫–æ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞');
    
    process.exit(0);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    process.exit(1);
  }
}

function getLanguageEmoji(lang) {
  const emojis = {
    'en': 'üá¨üáß',
    'ru': 'üá∑üá∫',
    'kk': 'üá∞üáø'
  };
  return emojis[lang] || '‚ùì';
}

debugLanguageFlow();
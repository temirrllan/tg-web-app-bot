require('dotenv').config();

const express = require('express');
const cors = require('cors');
const TelegramBot = require('node-telegram-bot-api');
const logger = require('./middleware/logger');
const authRoutes = require('./routes/authRoutes');
const habitRoutes = require('./routes/habitRoutes');
const { generalLimiter } = require('./middleware/rateLimit');
const keepAliveService = require('./services/keepAlive');
const db = require('./config/database');

const app = express();

const PORT = Number(process.env.PORT || 3001);
const BOT_TOKEN = process.env.BOT_TOKEN;
const BOT_SECRET = process.env.BOT_SECRET;
const FRONTEND_URL = process.env.FRONTEND_URL;
const WEBAPP_URL = process.env.WEBAPP_URL || FRONTEND_URL;

if (!BOT_TOKEN) {
  console.error('‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!');
  process.exit(1);
}
if (!BOT_SECRET) {
  console.error('‚ùå BOT_SECRET –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!');
  process.exit(1);
}

/** —á—Ç–æ–±—ã rate-limit –∏ IP —Ä–∞–±–æ—Ç–∞–ª–∏ –∑–∞ nginx/render */
app.set('trust proxy', 1);

/** CORS */
const extraOrigins = (process.env.CORS_ORIGINS || '')
  .split(',')
  .map(s => s.trim())
  .filter(Boolean);

const allowedOrigins = [
  FRONTEND_URL,
  WEBAPP_URL,
  'https://web.telegram.org',
  'http://localhost:5173',
  'http://localhost:5174',
  ...extraOrigins
].filter(Boolean);

app.use(
  cors({
    origin(origin, cb) {
      if (!origin) return cb(null, true); // mobile apps / curl
      if (allowedOrigins.includes(origin)) return cb(null, true);
      // –ú—è–≥–∫–∏–π CORS (–Ω–µ —Ä–æ–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –∏–∑ –Ω–µ–∑–Ω–∞–∫–æ–º—ã—Ö –æ—Ä–∏–¥–∂–∏–Ω–æ–≤, –Ω–æ –Ω–µ –≤—ã–¥–∞—ë–º –∫—Ä–µ–¥—ã)
      return cb(null, false);
    },
    credentials: true
  })
);

app.use(express.json());
app.use(logger);
app.use(generalLimiter);

/** Health */
app.get('/', (req, res) => {
  res.json({
    status: 'ok',
    service: 'habit-tracker',
    timestamp: new Date().toISOString(),
    bot: 'active'
  });
});

app.get('/health', (req, res) => {
  res.json({ status: 'ok', timestamp: new Date().toISOString() });
});

/** API */
app.use('/api/auth', authRoutes);
app.use('/api', habitRoutes);

/** ---------- TELEGRAM BOT (WEBHOOK) ---------- */
console.log('\nü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ (webhook)...');

/** —Å–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ –±–µ–∑ polling */
const bot = new TelegramBot(BOT_TOKEN, { polling: false });

// –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–∑–∞–ø—É—Å—Ç–∏–º –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞)
const ReminderService = require('./services/reminderService');
const reminderService = new ReminderService(bot);

/** –µ–¥–∏–Ω—ã–π –ø—É—Ç—å webhook ‚Äî –≤–∫–ª—é—á–∞–µ–º —Ç–æ–∫–µ–Ω –≤ –ø—É—Ç—å */
const WEBHOOK_PATH = `/api/telegram/webhook/${BOT_TOKEN}`;

/** –∑–∞—â–∏—Ç–∞ webhook —Å–µ–∫—Ä–µ—Ç–æ–º */
app.post(WEBHOOK_PATH, (req, res) => {
  try {
    const secretHdr = req.get('x-telegram-bot-api-secret-token');
    if (secretHdr !== BOT_SECRET) {
      return res.sendStatus(401);
    }
    bot.processUpdate(req.body);
    res.sendStatus(200);
  } catch (e) {
    console.error('Webhook processUpdate error:', e);
    res.sendStatus(500);
  }
});

/** –•—ç–Ω–¥–ª–µ—Ä—ã –±–æ—Ç–∞ */
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text || '';

  if (text === '/start') {
    await bot.sendMessage(
      chatId,
      '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Habit Tracker! üéØ\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:',
      {
        reply_markup: {
          keyboard: [
            [{ text: 'üìä –ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏' }],
            [{ text: '‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ' }],
            [{ text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏' }]
          ],
          resize_keyboard: true
        }
      }
    );

    await bot.sendMessage(chatId, '–û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∞–º–∏:', {
      reply_markup: {
        inline_keyboard: [[{
          text: 'üì± –û—Ç–∫—Ä—ã—Ç—å Habit Tracker',
          web_app: { url: WEBAPP_URL }
        }]]
      }
    });
    return;
  }

  if (text === 'üìä –ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏') {
    await bot.sendMessage(chatId, '–û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∞—à–∏—Ö –ø—Ä–∏–≤—ã—á–µ–∫:', {
      reply_markup: {
        inline_keyboard: [[{
          text: 'üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
          web_app: { url: WEBAPP_URL }
        }]]
      }
    });
    return;
  }

  if (text === '‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ' || text === '–ü–æ–ª—É—á–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–∞') {
    await bot.sendMessage(
      chatId,
      '*Habit Tracker Bot* ü§ñ\n\n' +
      '–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º:\n' +
      '‚Ä¢ ‚úÖ –°–æ–∑–¥–∞–≤–∞—Ç—å –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–∏–≤—ã—á–∫–∏\n' +
      '‚Ä¢ üìÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n' +
      '‚Ä¢ üîî –ü–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n' +
      '‚Ä¢ üìä –°–ª–µ–¥–∏—Ç—å –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º\n' +
      '‚Ä¢ üî• –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏—é\n\n' +
      '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Ç–∫—Ä—ã—Ç—å Habit Tracker" –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã!',
      { parse_mode: 'Markdown' }
    );
    return;
  }

  if (text === '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏') {
    await bot.sendMessage(
      chatId,
      '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.\n' +
      '–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n' +
      '‚Ä¢ –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (RU/EN)\n' +
      '‚Ä¢ –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π\n' +
      '‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
      {
        reply_markup: {
          inline_keyboard: [[{
            text: '‚öôÔ∏è –û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏',
            web_app: { url: `${WEBAPP_URL}#settings` }
          }]]
        }
      }
    );
    return;
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫ –∏–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
bot.on('callback_query', async (callbackQuery) => {
  const chatId = callbackQuery.message.chat.id;
  const data = callbackQuery.data;
  const messageId = callbackQuery.message.message_id;
  
  console.log(`üì≤ Callback received: ${data} from chat ${chatId}`);
  
  if (data.startsWith('mark_done_')) {
    const habitId = data.replace('mark_done_', '');
    
    try {
      // –û—Ç–º–µ—á–∞–µ–º –ø—Ä–∏–≤—ã—á–∫—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
      await db.query(
        `INSERT INTO habit_marks (habit_id, date, status) 
         VALUES ($1, CURRENT_DATE, 'completed')
         ON CONFLICT (habit_id, date) 
         DO UPDATE SET status = 'completed', marked_at = CURRENT_TIMESTAMP`,
        [habitId]
      );
      
      // –û–±–Ω–æ–≤–ª—è–µ–º streak
      await db.query(
        `UPDATE habits 
         SET streak_current = streak_current + 1,
             streak_best = GREATEST(streak_current + 1, streak_best)
         WHERE id = $1`,
        [habitId]
      );
      
      await bot.editMessageText('‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ü—Ä–∏–≤—ã—á–∫–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è.', {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: {
          inline_keyboard: [[
            { text: 'üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: WEBAPP_URL } }
          ]]
        }
      });
      
      await bot.answerCallbackQuery(callbackQuery.id, {
        text: '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ!'
      });
      
      console.log(`‚úÖ Habit ${habitId} marked as done`);
    } catch (error) {
      console.error('Error marking habit done:', error);
      await bot.answerCallbackQuery(callbackQuery.id, {
        text: '‚ùå –û—à–∏–±–∫–∞'
      });
    }
  } else if (data.startsWith('mark_skip_')) {
    const habitId = data.replace('mark_skip_', '');
    
    try {
      await db.query(
        `INSERT INTO habit_marks (habit_id, date, status) 
         VALUES ($1, CURRENT_DATE, 'skipped')
         ON CONFLICT (habit_id, date) 
         DO UPDATE SET status = 'skipped', marked_at = CURRENT_TIMESTAMP`,
        [habitId]
      );
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º streak –ø—Ä–∏ –ø—Ä–æ–ø—É—Å–∫–µ
      await db.query(
        'UPDATE habits SET streak_current = 0 WHERE id = $1',
        [habitId]
      );
      
      await bot.editMessageText('‚è≠ –ü—Ä–∏–≤—ã—á–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.', {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: {
          inline_keyboard: [[
            { text: 'üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: WEBAPP_URL } }
          ]]
        }
      });
      
      await bot.answerCallbackQuery(callbackQuery.id, {
        text: '‚è≠ –ü—Ä–æ–ø—É—â–µ–Ω–æ'
      });
      
      console.log(`‚è≠ Habit ${habitId} marked as skipped`);
    } catch (error) {
      console.error('Error marking habit skipped:', error);
      await bot.answerCallbackQuery(callbackQuery.id, {
        text: '‚ùå –û—à–∏–±–∫–∞'
      });
    }
  }
});

/** ---------- –ó–∞–ø—É—Å–∫ HTTP –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook ---------- */
const server = app.listen(PORT, async () => {
  console.log(`\nüöÄ Server running on port ${PORT}`);
  console.log(`üìù Environment: ${process.env.NODE_ENV || 'development'}`);
  console.log(`üîó API URL: http://localhost:${PORT}/api`);
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã
  keepAliveService.start();
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞
  reminderService.start();
  
  try {
    // –°—Ç–∞–≤–∏–º/–æ–±–Ω–æ–≤–ª—è–µ–º webhook –û–î–ù–ò–ú —Å–ø–æ—Å–æ–±–æ–º –∏ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —Å —Å–µ–∫—Ä–µ—Ç–æ–º
    const publicBase = process.env.BACKEND_PUBLIC_URL || ''; // –µ—Å–ª–∏ –∑–∞–¥–∞–¥–∏—Ç–µ ‚Äî –ø–æ—Å—Ç–∞–≤–∏–º –æ—Ç—Å—é–¥–∞
    if (publicBase) {
      const webhookUrl = `${publicBase}${WEBHOOK_PATH}`;
      await bot.setWebHook(webhookUrl, { secret_token: BOT_SECRET, drop_pending_updates: true });
      console.log(`‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${webhookUrl}`);
    } else {
      console.log('‚ÑπÔ∏è BACKEND_PUBLIC_URL –Ω–µ –∑–∞–¥–∞–Ω ‚Äî webhook –Ω–µ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞ —Å—Ç–∞—Ä—Ç–µ (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ setWebhook –≤—Ä—É—á–Ω—É—é).');
    }
  } catch (e) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook:', e);
  }
});

/** –ì—Ä–µ–π—Å—Ñ—É–ª —à–∞—Ç–¥–∞—É–Ω */
process.on('SIGTERM', () => {
  console.log('SIGTERM signal received: closing HTTP server');
  reminderService.stop();
  keepAliveService.stop();
  server.close(() => process.exit(0));
});

process.on('SIGINT', () => {
  console.log('SIGINT signal received: closing HTTP server');
  reminderService.stop();
  keepAliveService.stop();
  server.close(() => process.exit(0));
});
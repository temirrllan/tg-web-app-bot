require('dotenv').config();

const express = require('express');
const cors = require('cors');
const TelegramBot = require('node-telegram-bot-api');
const logger = require('./middleware/logger');
const authRoutes = require('./routes/authRoutes');
const habitRoutes = require('./routes/habitRoutes');
const { generalLimiter } = require('./middleware/rateLimit');
const keepAliveService = require('./services/keepAlive');
const db = require('./config/database');
const subscriptionCron = require('./services/subscriptionCron');
const app = express();

const PORT = Number(process.env.PORT || 3001);
const BOT_TOKEN = process.env.BOT_TOKEN;
const BOT_SECRET = process.env.BOT_SECRET;
const FRONTEND_URL = process.env.FRONTEND_URL;
const WEBAPP_URL = process.env.WEBAPP_URL || FRONTEND_URL;

if (!BOT_TOKEN) {
  console.error('‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!');
  process.exit(1);
}
if (!BOT_SECRET) {
  console.error('‚ùå BOT_SECRET –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!');
  process.exit(1);
}

/** —á—Ç–æ–±—ã rate-limit –∏ IP —Ä–∞–±–æ—Ç–∞–ª–∏ –∑–∞ nginx/render */
app.set('trust proxy', 1);

/** CORS */
const extraOrigins = (process.env.CORS_ORIGINS || '')
  .split(',')
  .map(s => s.trim())
  .filter(Boolean);

const allowedOrigins = [
  FRONTEND_URL,
  WEBAPP_URL,
  'https://web.telegram.org',
  'http://localhost:5173',
  'http://localhost:5174',
  ...extraOrigins
].filter(Boolean);

app.use(
  cors({
    origin(origin, cb) {
      if (!origin) return cb(null, true); // mobile apps / curl
      if (allowedOrigins.includes(origin)) return cb(null, true);
      // –ú—è–≥–∫–∏–π CORS (–Ω–µ —Ä–æ–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –∏–∑ –Ω–µ–∑–Ω–∞–∫–æ–º—ã—Ö –æ—Ä–∏–¥–∂–∏–Ω–æ–≤, –Ω–æ –Ω–µ –≤—ã–¥–∞—ë–º –∫—Ä–µ–¥—ã)
      return cb(null, false);
    },
    credentials: true
  })
);

app.use(express.json());
app.use(logger);
app.use(generalLimiter);

/** Health */
app.get('/', (req, res) => {
  res.json({
    status: 'ok',
    service: 'habit-tracker',
    timestamp: new Date().toISOString(),
    bot: 'active'
  });
});

app.get('/health', (req, res) => {
  res.json({ status: 'ok', timestamp: new Date().toISOString() });
});

/** API */
app.use('/api/auth', authRoutes);
app.use('/api', habitRoutes);

/** ---------- TELEGRAM BOT (WEBHOOK) ---------- */
console.log('\nü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ (webhook)...');

/** —Å–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ –±–µ–∑ polling */
const bot = new TelegramBot(BOT_TOKEN, { polling: false });

// –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–∑–∞–ø—É—Å—Ç–∏–º –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞)
const ReminderService = require('./services/reminderService');
const reminderService = new ReminderService(bot);

/** –µ–¥–∏–Ω—ã–π –ø—É—Ç—å webhook ‚Äî –≤–∫–ª—é—á–∞–µ–º —Ç–æ–∫–µ–Ω –≤ –ø—É—Ç—å */
const WEBHOOK_PATH = `/api/telegram/webhook/${BOT_TOKEN}`;

/** –∑–∞—â–∏—Ç–∞ webhook —Å–µ–∫—Ä–µ—Ç–æ–º */
app.post(WEBHOOK_PATH, (req, res) => {
  try {
    const secretHdr = req.get('x-telegram-bot-api-secret-token');
    if (secretHdr !== BOT_SECRET) {
      return res.sendStatus(401);
    }
    bot.processUpdate(req.body);
    res.sendStatus(200);
  } catch (e) {
    console.error('Webhook processUpdate error:', e);
    res.sendStatus(500);
  }
});

/** –•—ç–Ω–¥–ª–µ—Ä—ã –±–æ—Ç–∞ */
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text || '';

  if (text.startsWith('/start')) {
    const startParam = text.split(' ')[1];
    
    if (startParam && startParam.startsWith('join_')) {
      const shareCode = startParam.replace('join_', '');
      
      try {
        // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        let userResult = await db.query(
          'SELECT id, telegram_id FROM users WHERE telegram_id = $1',
          [chatId.toString()]
        );
        
        let userId;
        
        if (userResult.rows.length === 0) {
          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const tgUser = msg.from;
          const newUserResult = await db.query(
            `INSERT INTO users (
              telegram_id, username, first_name, last_name, language
            ) VALUES ($1, $2, $3, $4, $5)
            RETURNING id`,
            [
              chatId.toString(),
              tgUser.username || null,
              tgUser.first_name || '',
              tgUser.last_name || '',
              tgUser.language_code || 'en'
            ]
          );
          userId = newUserResult.rows[0].id;
        } else {
          userId = userResult.rows[0].id;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ share code –∏ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏
        const shareResult = await db.query(
          `SELECT sh.*, h.*, u.first_name as owner_name
           FROM shared_habits sh
           JOIN habits h ON sh.habit_id = h.id
           JOIN users u ON sh.owner_user_id = u.id
           WHERE sh.share_code = $1`,
          [shareCode]
        );
        
        if (shareResult.rows.length > 0) {
          const sharedHabit = shareResult.rows[0];
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º (–≤–∫–ª—é—á–∞—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö)
          const memberCheck = await db.query(
            'SELECT * FROM habit_members WHERE habit_id = $1 AND user_id = $2',
            [sharedHabit.habit_id, userId]
          );
          
          // –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–ø–∏—Å—å, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –µ—ë
          if (memberCheck.rows.length > 0 && !memberCheck.rows[0].is_active) {
            await db.query(
              'UPDATE habit_members SET is_active = true WHERE habit_id = $1 AND user_id = $2',
              [sharedHabit.habit_id, userId]
            );
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const userHabitCheck = await db.query(
              'SELECT * FROM habits WHERE user_id = $1 AND parent_habit_id = $2',
              [userId, sharedHabit.habit_id]
            );
            
            let userHabitId;
            
            if (userHabitCheck.rows.length > 0) {
              // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø—Ä–∏–≤—ã—á–∫—É
              await db.query(
                'UPDATE habits SET is_active = true WHERE id = $1',
                [userHabitCheck.rows[0].id]
              );
              userHabitId = userHabitCheck.rows[0].id;
            } else {
              // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–ø–∏—é –ø—Ä–∏–≤—ã—á–∫–∏
              const newHabitResult = await db.query(
                `INSERT INTO habits (
                  user_id, category_id, title, goal, schedule_type, 
                  schedule_days, reminder_time, reminder_enabled, is_bad_habit,
                  parent_habit_id
                ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
                RETURNING id`,
                [
                  userId,
                  sharedHabit.category_id,
                  sharedHabit.title,
                  sharedHabit.goal,
                  sharedHabit.schedule_type,
                  sharedHabit.schedule_days,
                  sharedHabit.reminder_time,
                  sharedHabit.reminder_enabled,
                  sharedHabit.is_bad_habit,
                  sharedHabit.habit_id
                ]
              );
              userHabitId = newHabitResult.rows[0].id;
            }
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤—è–∑—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Å –ø—Ä–∏–≤—ã—á–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const ownerMemberCheck = await db.query(
              'SELECT * FROM habit_members WHERE habit_id = $1 AND user_id = $2',
              [userHabitId, sharedHabit.owner_user_id]
            );
            
            if (ownerMemberCheck.rows.length > 0) {
              await db.query(
                'UPDATE habit_members SET is_active = true WHERE habit_id = $1 AND user_id = $2',
                [userHabitId, sharedHabit.owner_user_id]
              );
            } else {
              await db.query(
                'INSERT INTO habit_members (habit_id, user_id) VALUES ($1, $2)',
                [userHabitId, sharedHabit.owner_user_id]
              );
            }
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞
            const ownerData = await db.query(
              'SELECT telegram_id FROM users WHERE id = $1',
              [sharedHabit.owner_user_id]
            );
            
            if (ownerData.rows.length > 0) {
              await bot.sendMessage(
                ownerData.rows[0].telegram_id,
                `üéâ ${msg.from.first_name} rejoined your habit "${sharedHabit.title}"!`,
                { parse_mode: 'Markdown' }
              );
            }
            
            await bot.sendMessage(
              chatId,
              `‚úÖ **Welcome back!**\n\n` +
              `You've rejoined the habit:\n` +
              `üìù **${sharedHabit.title}**\n` +
              `üéØ Goal: ${sharedHabit.goal}\n` +
              `üë§ Shared by: ${sharedHabit.owner_name}\n\n` +
              `Open the app to continue tracking this habit!`,
              {
                parse_mode: 'Markdown',
                reply_markup: {
                  inline_keyboard: [[
                    {
                      text: 'üì± Open Habit Tracker',
                      web_app: { url: WEBAPP_URL }
                    }
                  ]]
                }
              }
            );
            
            return;
          }
          
          if (memberCheck.rows.length === 0) {
            // –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –ø—Ä–∏–≤—ã—á–∫–µ
            
            // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –ø—Ä–∏–≤—ã—á–∫–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const newHabitResult = await db.query(
              `INSERT INTO habits (
                user_id, category_id, title, goal, schedule_type, 
                schedule_days, reminder_time, reminder_enabled, is_bad_habit,
                parent_habit_id
              ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
              RETURNING id`,
              [
                userId,
                sharedHabit.category_id,
                sharedHabit.title,
                sharedHabit.goal,
                sharedHabit.schedule_type,
                sharedHabit.schedule_days,
                sharedHabit.reminder_time,
                sharedHabit.reminder_enabled,
                sharedHabit.is_bad_habit,
                sharedHabit.habit_id // –°—Å—ã–ª–∫–∞ –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –ø—Ä–∏–≤—ã—á–∫—É
              ]
            );
            
            const newHabitId = newHabitResult.rows[0].id;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–∏–≤—ã—á–∫–∏
            await db.query(
              'INSERT INTO habit_members (habit_id, user_id) VALUES ($1, $2)',
              [sharedHabit.habit_id, userId]
            );
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–æ–≤–æ–π –ø—Ä–∏–≤—ã—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await db.query(
              'INSERT INTO habit_members (habit_id, user_id) VALUES ($1, $2)',
              [newHabitId, sharedHabit.owner_user_id]
            );
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø—Ä–∏–≤—ã—á–∫–∏ –æ –Ω–æ–≤–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–µ
            const ownerData = await db.query(
              'SELECT telegram_id FROM users WHERE id = $1',
              [sharedHabit.owner_user_id]
            );
            
            if (ownerData.rows.length > 0) {
              await bot.sendMessage(
                ownerData.rows[0].telegram_id,
                `üéâ ${msg.from.first_name} joined your habit "${sharedHabit.title}"!`,
                { parse_mode: 'Markdown' }
              );
            }
            
            await bot.sendMessage(
              chatId,
              `‚úÖ **Success!**\n\n` +
              `You've joined the habit:\n` +
              `üìù **${sharedHabit.title}**\n` +
              `üéØ Goal: ${sharedHabit.goal}\n` +
              `üë§ Shared by: ${sharedHabit.owner_name}\n\n` +
              `Open the app to start tracking this habit together!`,
              {
                parse_mode: 'Markdown',
                reply_markup: {
                  inline_keyboard: [[
                    {
                      text: 'üì± Open Habit Tracker',
                      web_app: { url: WEBAPP_URL }
                    }
                  ]]
                }
              }
            );
          } else {
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–∫—Ç–∏–≤–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫
            await bot.sendMessage(
              chatId,
              `‚ÑπÔ∏è You're already tracking this habit!\n\n` +
              `üìù **${sharedHabit.title}**\n\n` +
              `Open the app to continue:`,
              {
                parse_mode: 'Markdown',
                reply_markup: {
                  inline_keyboard: [[
                    {
                      text: 'üì± Open Habit Tracker',
                      web_app: { url: WEBAPP_URL }
                    }
                  ]]
                }
              }
            );
          }
          
          return;
        } else {
          await bot.sendMessage(
            chatId,
            '‚ùå Invalid or expired invitation link.\n\n' +
            'Please ask your friend to share a new link.',
            { parse_mode: 'Markdown' }
          );
          return;
        }
      } catch (error) {
        console.error('Error processing join code:', error);
        await bot.sendMessage(
          chatId,
          '‚ùå An error occurred while joining the habit.\n' +
          'Please try again later.',
          { parse_mode: 'Markdown' }
        );
        return;
      }
    }
    
    // –û–±—ã—á–Ω—ã–π —Å—Ç–∞—Ä—Ç (–±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)
    await bot.sendMessage(
      chatId,
      '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Habit Tracker! üéØ\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:',
      {
        reply_markup: {
          keyboard: [
            [{ text: 'üìä –ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏' }],
            [{ text: '‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ' }],
            [{ text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏' }]
          ],
          resize_keyboard: true
        }
      }
    );

    await bot.sendMessage(chatId, '–û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∞–º–∏:', {
      reply_markup: {
        inline_keyboard: [[{
          text: 'üì± –û—Ç–∫—Ä—ã—Ç—å Habit Tracker',
          web_app: { url: WEBAPP_URL }
        }]]
      }
    });
  }

  if (text === '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏') {
    await bot.sendMessage(
      chatId,
      '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.\n' +
      '–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n' +
      '‚Ä¢ –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (RU/EN)\n' +
      '‚Ä¢ –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π\n' +
      '‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
      {
        reply_markup: {
          inline_keyboard: [[{
            text: '‚öôÔ∏è –û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏',
            web_app: { url: `${WEBAPP_URL}#settings` }
          }]]
        }
      }
    );
    return;
  }

  // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
  if (text === '/testreminder') {
    try {
      // –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const userResult = await db.query(
        'SELECT id FROM users WHERE telegram_id = $1',
        [chatId.toString()]
      );
      
      if (userResult.rows.length > 0 && reminderService) {
        const userId = userResult.rows[0].id;
        const count = await reminderService.testReminder(userId, chatId);
        
        if (count > 0) {
          await bot.sendMessage(
            chatId, 
            `‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${count} —Ç–µ—Å—Ç–æ–≤—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.\n\n–†–µ–∞–ª—å–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.`
          );
        } else {
          await bot.sendMessage(
            chatId, 
            '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫ —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏.\n\n–°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–∏–≤—ã—á–∫—É –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.'
          );
        }
      } else {
        await bot.sendMessage(
          chatId, 
          '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —Å–µ—Ä–≤–∏—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.'
        );
      }
    } catch (error) {
      console.error('Test reminder error:', error);
      await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.');
    }
    return;
  }

  // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
  if (text === '/reminderstatus') {
    try {
      if (reminderService) {
        const next = await reminderService.getNextReminder();
        if (next) {
          await bot.sendMessage(
            chatId,
            `üìÖ –°–ª–µ–¥—É—é—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:\n\n` +
            `üìù –ü—Ä–∏–≤—ã—á–∫–∞: ${next.title}\n` +
            `‚è∞ –í—Ä–µ–º—è: ${next.reminder_time.substring(0, 5)}\n` +
            `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${next.first_name}`
          );
        } else {
          await bot.sendMessage(chatId, 'üì≠ –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.');
        }
      } else {
        await bot.sendMessage(chatId, '‚ùå –°–µ—Ä–≤–∏—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.');
      }
    } catch (error) {
      console.error('Status error:', error);
      await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞.');
    }
    return;
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫ –∏–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫ –∏–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
bot.on('callback_query', async (callbackQuery) => {
  const chatId = callbackQuery.message.chat.id;
  const data = callbackQuery.data;
  const messageId = callbackQuery.message.message_id;
  
  console.log(`üì≤ Callback received: ${data} from chat ${chatId}`);
  
  if (data.startsWith('mark_done_')) {
    const habitId = data.replace('mark_done_', '');
    
    try {
      // –û—Ç–º–µ—á–∞–µ–º –ø—Ä–∏–≤—ã—á–∫—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
      await db.query(
        `INSERT INTO habit_marks (habit_id, date, status) 
         VALUES ($1, CURRENT_DATE, 'completed')
         ON CONFLICT (habit_id, date) 
         DO UPDATE SET status = 'completed', marked_at = CURRENT_TIMESTAMP`,
        [habitId]
      );
      
      // –û–±–Ω–æ–≤–ª—è–µ–º streak
      await db.query(
        `UPDATE habits 
         SET streak_current = streak_current + 1,
             streak_best = GREATEST(streak_current + 1, streak_best)
         WHERE id = $1`,
        [habitId]
      );
      
      await bot.editMessageText('‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ü—Ä–∏–≤—ã—á–∫–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è.', {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: {
          inline_keyboard: [[
            { text: 'üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: WEBAPP_URL } }
          ]]
        }
      });
      
      await bot.answerCallbackQuery(callbackQuery.id, {
        text: '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ!'
      });
      
      console.log(`‚úÖ Habit ${habitId} marked as done`);
    } catch (error) {
      console.error('Error marking habit done:', error);
      await bot.answerCallbackQuery(callbackQuery.id, {
        text: '‚ùå –û—à–∏–±–∫–∞'
      });
    }
  } else if (data.startsWith('mark_skip_')) {
    const habitId = data.replace('mark_skip_', '');
    
    try {
      await db.query(
        `INSERT INTO habit_marks (habit_id, date, status) 
         VALUES ($1, CURRENT_DATE, 'skipped')
         ON CONFLICT (habit_id, date) 
         DO UPDATE SET status = 'skipped', marked_at = CURRENT_TIMESTAMP`,
        [habitId]
      );
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º streak –ø—Ä–∏ –ø—Ä–æ–ø—É—Å–∫–µ
      await db.query(
        'UPDATE habits SET streak_current = 0 WHERE id = $1',
        [habitId]
      );
      
      await bot.editMessageText('‚è≠ –ü—Ä–∏–≤—ã—á–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.', {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: {
          inline_keyboard: [[
            { text: 'üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: WEBAPP_URL } }
          ]]
        }
      });
      
      await bot.answerCallbackQuery(callbackQuery.id, {
        text: '‚è≠ –ü—Ä–æ–ø—É—â–µ–Ω–æ'
      });
      
      console.log(`‚è≠ Habit ${habitId} marked as skipped`);
    } catch (error) {
      console.error('Error marking habit skipped:', error);
      await bot.answerCallbackQuery(callbackQuery.id, {
        text: '‚ùå –û—à–∏–±–∫–∞'
      });
    }
  } else if (data.startsWith('quick_done_')) {
    // –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –æ—Ç–º–µ—Ç–∫–∏ –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥—Ä—É–≥–∞
    const parts = data.split('_');
    const habitId = parts[2];
    const date = parts[3] || new Date().toISOString().split('T')[0];
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
      const userResult = await db.query(
        'SELECT id, first_name FROM users WHERE telegram_id = $1',
        [chatId.toString()]
      );
      
      if (userResult.rows.length === 0) {
        await bot.answerCallbackQuery(callbackQuery.id, {
          text: '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
        });
        return;
      }
      
      const userId = userResult.rows[0].id;
      const userName = userResult.rows[0].first_name;
      
      // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–∏–≤—ã—á–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–≤—è–∑–∞–Ω–Ω—É—é —Å —ç—Ç–æ–π –≥—Ä—É–ø–ø–æ–π
      const userHabitResult = await db.query(
        `SELECT h.id, h.title 
         FROM habits h
         WHERE h.user_id = $1
         AND (h.parent_habit_id = $2 OR h.id = $2 OR h.parent_habit_id = (
           SELECT parent_habit_id FROM habits WHERE id = $2
         ))
         AND h.is_active = true
         LIMIT 1`,
        [userId, habitId]
      );
      
      if (userHabitResult.rows.length === 0) {
        await bot.answerCallbackQuery(callbackQuery.id, {
          text: '‚ùå –ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
        });
        return;
      }
      
      const userHabitId = userHabitResult.rows[0].id;
      const habitTitle = userHabitResult.rows[0].title;
      
      // –û—Ç–º–µ—á–∞–µ–º –ø—Ä–∏–≤—ã—á–∫—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
      await db.query(
        `INSERT INTO habit_marks (habit_id, date, status) 
         VALUES ($1, $2::date, 'completed')
         ON CONFLICT (habit_id, date) 
         DO UPDATE SET status = 'completed', marked_at = CURRENT_TIMESTAMP`,
        [userHabitId, date]
      );
      
      // –û–±–Ω–æ–≤–ª—è–µ–º streak
      await db.query(
        `UPDATE habits 
         SET streak_current = streak_current + 1,
             streak_best = GREATEST(streak_current + 1, streak_best)
         WHERE id = $1`,
        [userHabitId]
      );
      
      await bot.editMessageText(
        `‚úÖ <b>–û—Ç–ª–∏—á–Ω–æ, ${userName}!</b>\n\n–ü—Ä–∏–≤—ã—á–∫–∞ <b>"${habitTitle}"</b> –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!\n\n–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üí™`, 
        {
          chat_id: chatId,
          message_id: messageId,
          parse_mode: 'HTML',
          reply_markup: {
            inline_keyboard: [[
              { text: 'üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: WEBAPP_URL } }
            ]]
          }
        }
      );
      
      await bot.answerCallbackQuery(callbackQuery.id, {
        text: '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ! –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!'
      });
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥—Ä—É–∑—å—è–º
      const habitResult = await db.query(
        'SELECT * FROM habits WHERE id = $1',
        [userHabitId]
      );
      
      if (habitResult.rows.length > 0) {
        const sendFriendNotifications = require('./controllers/markController').sendFriendNotifications;
        await sendFriendNotifications(habitResult.rows[0], userId, date);
      }
      
      console.log(`‚úÖ Quick habit ${userHabitId} marked as done for user ${userId}`);
    } catch (error) {
      console.error('Error quick marking habit:', error);
      await bot.answerCallbackQuery(callbackQuery.id, {
        text: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ'
      });
    }
  }
});

/** ---------- –ó–∞–ø—É—Å–∫ HTTP –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook ---------- */
const server = app.listen(PORT, async () => {
  console.log(`\nüöÄ Server running on port ${PORT}`);
  console.log(`üìù Environment: ${process.env.NODE_ENV || 'development'}`);
  console.log(`üîó API URL: http://localhost:${PORT}/api`);
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã
  keepAliveService.start();
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞
  reminderService.start();
  // –ó–∞–ø—É—Å–∫–∞–µ–º cron –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫
subscriptionCron.start();
  try {
    // –°—Ç–∞–≤–∏–º/–æ–±–Ω–æ–≤–ª—è–µ–º webhook –û–î–ù–ò–ú —Å–ø–æ—Å–æ–±–æ–º –∏ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —Å —Å–µ–∫—Ä–µ—Ç–æ–º
    const publicBase = process.env.BACKEND_PUBLIC_URL || ''; // –µ—Å–ª–∏ –∑–∞–¥–∞–¥–∏—Ç–µ ‚Äî –ø–æ—Å—Ç–∞–≤–∏–º –æ—Ç—Å—é–¥–∞
    if (publicBase) {
      const webhookUrl = `${publicBase}${WEBHOOK_PATH}`;
      await bot.setWebHook(webhookUrl, { secret_token: BOT_SECRET, drop_pending_updates: true });
      console.log(`‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${webhookUrl}`);
    } else {
      console.log('‚ÑπÔ∏è BACKEND_PUBLIC_URL –Ω–µ –∑–∞–¥–∞–Ω ‚Äî webhook –Ω–µ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞ —Å—Ç–∞—Ä—Ç–µ (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ setWebhook –≤—Ä—É—á–Ω—É—é).');
    }
  } catch (e) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook:', e);
  }
});

/** –ì—Ä–µ–π—Å—Ñ—É–ª —à–∞—Ç–¥–∞—É–Ω */
process.on('SIGTERM', () => {
  console.log('SIGTERM signal received: closing HTTP server');
  reminderService.stop();
  keepAliveService.stop();
  server.close(() => process.exit(0));
});

process.on('SIGINT', () => {
  console.log('SIGINT signal received: closing HTTP server');
  reminderService.stop();
  keepAliveService.stop();
  server.close(() => process.exit(0));
});
subscriptionCron.stop();
// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–æ—Ç–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
module.exports.bot = bot;
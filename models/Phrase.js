const db = require('../config/database');

class Phrase {
  static async getRandomPhrase(language = 'en', completedCount = 0, totalCount = 0) {
    const lang = String(language || 'en').toLowerCase().startsWith('ru') ? 'ru' : 'en';
    
    try {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ—Ä–∞–∑—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
      let phraseType = 'encouragement';
      let minCompleted = 0;
      
      if (totalCount === 0) {
        // –ù–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫
        phraseType = 'encouragement';
        minCompleted = 0;
      } else if (completedCount === 0) {
        // –ù–∏ –æ–¥–Ω–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
        phraseType = 'encouragement';
        minCompleted = 0;
      } else if (completedCount === totalCount) {
        // –í—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
        phraseType = 'perfect';
        minCompleted = completedCount;
      } else if (completedCount >= totalCount * 0.7) {
        // –ë–æ–ª—å—à–µ 70% –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
        phraseType = 'success';
        minCompleted = Math.floor(totalCount * 0.7);
      } else if (completedCount >= totalCount * 0.5) {
        // –ë–æ–ª—å—à–µ 50% –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
        phraseType = 'streak';
        minCompleted = Math.floor(totalCount * 0.5);
      } else {
        // –ú–µ–Ω—å—à–µ 50% –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
        phraseType = 'encouragement';
        minCompleted = completedCount;
      }
      
      // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ñ—Ä–∞–∑—É –Ω—É–∂–Ω–æ–≥–æ —Ç–∏–ø–∞
      let result = await db.query(
        `SELECT phrase_${lang} AS text, emoji, type
         FROM motivational_phrases
         WHERE type = $1
         AND min_completed <= $2
         ORDER BY RANDOM()
         LIMIT 1`,
        [phraseType, completedCount]
      );
      
      // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ñ—Ä–∞–∑—É –Ω—É–∂–Ω–æ–≥–æ —Ç–∏–ø–∞, –±–µ—Ä–µ–º –ª—é–±—É—é –ø–æ–¥—Ö–æ–¥—è—â—É—é –ø–æ min_completed
      if (result.rows.length === 0) {
        result = await db.query(
          `SELECT phrase_${lang} AS text, emoji, type
           FROM motivational_phrases
           WHERE min_completed <= $1
           ORDER BY RANDOM()
           LIMIT 1`,
          [completedCount]
        );
      }
      
      if (result.rows.length > 0) {
        const phrase = result.rows[0];
        return {
          text: phrase.text,
          emoji: phrase.emoji || '',
          type: phrase.type || 'encouragement'
        };
      }
    } catch (error) {
      console.error('getRandomPhrase error:', error);
    }
    
    // –ó–∞–ø–∞—Å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π
    if (lang === 'ru') {
      if (totalCount === 0) {
        return { text: '–°–æ–∑–¥–∞–π —Å–≤–æ—é –ø–µ—Ä–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É!', emoji: 'üöÄ', type: 'encouragement' };
      } else if (completedCount === 0) {
        return { text: '–¢—ã —Å–ø—Ä–∞–≤–∏—à—å—Å—è!', emoji: 'üí™', type: 'encouragement' };
      } else if (completedCount === totalCount) {
        return { text: '–¢—ã –≤—Å—ë —Å–¥–µ–ª–∞–ª! –ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ!', emoji: 'üéâ', type: 'perfect' };
      } else {
        return { text: '–ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!', emoji: '‚ú®', type: 'success' };
      }
    } else {
      if (totalCount === 0) {
        return { text: 'Create your first habit!', emoji: 'üöÄ', type: 'encouragement' };
      } else if (completedCount === 0) {
        return { text: 'You can do it!', emoji: 'üí™', type: 'encouragement' };
      } else if (completedCount === totalCount) {
        return { text: 'All done! Amazing!', emoji: 'üéâ', type: 'perfect' };
      } else {
        return { text: 'Keep going!', emoji: '‚ú®', type: 'success' };
      }
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ—Ä–∞–∑—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏–≤—ã—á–∫–∏
  static async getPhraseForStatusChange(language = 'en', completedCount = 0, totalCount = 0, wasCompleted = false) {
    const lang = String(language || 'en').toLowerCase().startsWith('ru') ? 'ru' : 'en';
    
    try {
      // –ï—Å–ª–∏ –ø—Ä–∏–≤—ã—á–∫–∞ –±—ã–ª–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è
      if (!wasCompleted && completedCount > 0) {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        const progress = totalCount > 0 ? completedCount / totalCount : 0;
        let phraseType = 'success';
        
        if (progress === 1) {
          phraseType = 'perfect';
        } else if (progress >= 0.7) {
          phraseType = 'success';
        } else if (progress >= 0.5) {
          phraseType = 'streak';
        } else {
          phraseType = 'encouragement';
        }
        
        const result = await db.query(
          `SELECT phrase_${lang} AS text, emoji, type
           FROM motivational_phrases
           WHERE type = $1
           ORDER BY RANDOM()
           LIMIT 1`,
          [phraseType]
        );
        
        if (result.rows.length > 0) {
          const phrase = result.rows[0];
          return {
            text: phrase.text,
            emoji: phrase.emoji || '',
            type: phrase.type || phraseType
          };
        }
      }
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥
      return await this.getRandomPhrase(language, completedCount, totalCount);
    } catch (error) {
      console.error('getPhraseForStatusChange error:', error);
      return await this.getRandomPhrase(language, completedCount, totalCount);
    }
  }
}

module.exports = Phrase;
const axios = require('axios');

class TelegramStarsService {
  constructor() {
    this.botToken = process.env.BOT_TOKEN;
    this.teamLeadUserId = process.env.TEAM_LEAD_TELEGRAM_ID; // ID —Ç–∏–º–ª–∏–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è stars
    this.apiUrl = `https://api.telegram.org/bot${this.botToken}`;
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Telegram Stars
   */
  async createInvoice(userId, planType, amount, description) {
    try {
      console.log(`üí∞ Creating invoice for user ${userId}: ${amount} stars for ${planType}`);
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–Ω–≤–æ–π—Å–∞
      const invoiceParams = {
        title: this.getPlanTitle(planType),
        description: description || 'Premium subscription for Habit Tracker',
        payload: JSON.stringify({
          userId,
          planType,
          timestamp: Date.now()
        }),
        currency: 'XTR', // Telegram Stars currency code
        prices: [
          {
            label: this.getPlanTitle(planType),
            amount: amount // –¶–µ–Ω–∞ –≤ stars
          }
        ]
      };
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–≤–æ–π—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      const response = await axios.post(`${this.apiUrl}/sendInvoice`, {
        chat_id: userId,
        ...invoiceParams
      });
      
      if (response.data.ok) {
        console.log(`‚úÖ Invoice created successfully for user ${userId}`);
        return {
          success: true,
          invoiceUrl: response.data.result
        };
      } else {
        throw new Error('Failed to create invoice');
      }
    } catch (error) {
      console.error('Error creating invoice:', error.response?.data || error.message);
      throw error;
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ (webhook –æ—Ç Telegram)
   */
  async handleSuccessfulPayment(paymentData) {
    try {
      console.log('üí≥ Processing successful payment:', paymentData);
      
      const payload = JSON.parse(paymentData.invoice_payload);
      const { userId, planType } = payload;
      const amount = paymentData.total_amount;
      const telegramPaymentChargeId = paymentData.telegram_payment_charge_id;
      
      // –ü–µ—Ä–µ–≤–æ–¥–∏–º stars —Ç–∏–º–ª–∏–¥—É (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
      // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: Telegram Stars –ø–µ—Ä–µ–≤–æ–¥—è—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –∏–Ω–≤–æ–π—Å–∞
      // –ù–æ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      
      return {
        success: true,
        userId,
        planType,
        amount,
        transactionId: telegramPaymentChargeId
      };
    } catch (error) {
      console.error('Error processing payment:', error);
      throw error;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ API –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç)
   */
  async getUserStarsBalance(userId) {
    try {
      // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: Telegram Bot API –ø–æ–∫–∞ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–ª–∞–Ω—Å—É Stars
      // –≠—Ç–æ –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±—É–¥—É—â–µ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
      console.log(`‚ÑπÔ∏è Checking stars balance for user ${userId} - not available via API yet`);
      
      return {
        available: false,
        message: 'Balance check not available'
      };
    } catch (error) {
      console.error('Error checking balance:', error);
      return {
        available: false,
        error: error.message
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–ª–∞–Ω–∞
   */
  getPlanTitle(planType) {
    const titles = {
      '6_months': 'Premium for 6 Months',
      '1_year': 'Premium for 1 Year',
      'lifetime': 'Lifetime Premium'
    };
    
    return titles[planType] || 'Premium Subscription';
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ Stars
   */
  getBuyStarsLink() {
    // –û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ Telegram –¥–ª—è –ø–æ–∫—É–ø–∫–∏ Stars
    return 'https://t.me/PremiumBot';
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —É—Å–ø–µ—à–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ
   */
  async sendSubscriptionConfirmation(userId, planType, expiresAt) {
    try {
      const bot = require('../server').bot;
      
      const message = `üéâ <b>Congratulations!</b>

Your Premium subscription is now active!

üì¶ <b>Plan:</b> ${this.getPlanTitle(planType)}
${expiresAt ? `üìÖ <b>Valid until:</b> ${new Date(expiresAt).toLocaleDateString()}` : '‚ôæÔ∏è <b>Lifetime access</b>'}

‚ú® You now have:
‚Ä¢ Unlimited habits
‚Ä¢ Advanced statistics
‚Ä¢ Priority support

Thank you for your purchase! üíö`;
      
      await bot.sendMessage(userId, message, {
        parse_mode: 'HTML'
      });
      
      console.log(`‚úÖ Confirmation sent to user ${userId}`);
    } catch (error) {
      console.error('Error sending confirmation:', error);
    }
  }
}

module.exports = new TelegramStarsService();
// services/telegramStarsService.js
const axios = require('axios');
const db = require('../config/database');

const BOT_TOKEN = process.env.BOT_TOKEN;
const TEAM_LEAD_TELEGRAM_ID = process.env.TEAM_LEAD_TELEGRAM_ID; // ID –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞

class TelegramStarsService {
  /**
   * –°–æ–∑–¥–∞—Ç—å –∏–Ω–≤–æ–π—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Telegram Stars
   */
  static async createInvoice({ userId, planType, amount, description }) {
    try {
      console.log('Creating invoice:', { userId, planType, amount });

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userResult = await db.query(
        'SELECT telegram_id, first_name FROM users WHERE id = $1',
        [userId]
      );

      if (userResult.rows.length === 0) {
        throw new Error('User not found');
      }

      const user = userResult.rows[0];

      // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π payload –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
      const payload = {
        userId,
        planType,
        amount,
        timestamp: Date.now(),
        nonce: Math.random().toString(36).substring(7)
      };

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º pending invoice –≤ –ë–î
      const invoiceResult = await db.query(
        `INSERT INTO payment_invoices (
          user_id, plan_type, amount, status, payload
        ) VALUES ($1, $2, $3, 'pending', $4)
        RETURNING id`,
        [userId, planType, amount, JSON.stringify(payload)]
      );

      const invoiceId = invoiceResult.rows[0].id;

      // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è Telegram Bot API
      const invoiceParams = {
        title: `Premium Subscription - ${planType}`,
        description: description || 'Habit Tracker Premium Subscription',
        payload: JSON.stringify({ ...payload, invoiceId }),
        provider_token: '', // –ü—É—Å—Ç–æ –¥–ª—è Telegram Stars
        currency: 'XTR', // Telegram Stars
        prices: [{
          label: 'Subscription',
          amount: amount
        }]
      };

      console.log('Invoice created:', { invoiceId, payload });

      return {
        success: true,
        invoiceId,
        invoiceParams,
        telegramUserId: user.telegram_id
      };
    } catch (error) {
      console.error('Error creating invoice:', error);
      throw error;
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂
   */
  static async processSuccessfulPayment({ invoiceId, transactionId, telegramPaymentId }) {
  const client = await db.getClient();

  try {
    await client.query('BEGIN');

    console.log('Processing payment:', { invoiceId, transactionId });

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω–≤–æ–π—Å–µ
    const invoiceResult = await client.query(
      'SELECT * FROM payment_invoices WHERE id = $1',
      [invoiceId]
    );

    if (invoiceResult.rows.length === 0) {
      throw new Error('Invoice not found');
    }

    const invoice = invoiceResult.rows[0];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–Ω–≤–æ–π—Å –µ—â–µ –Ω–µ –±—ã–ª –æ–ø–ª–∞—á–µ–Ω
    if (invoice.status === 'paid') {
      console.log('Invoice already paid');
      await client.query('ROLLBACK');
      return { success: false, message: 'Already paid' };
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–Ω–≤–æ–π—Å–∞
    await client.query(
      `UPDATE payment_invoices 
       SET status = 'paid', 
           transaction_id = $1,
           telegram_payment_id = $2,
           paid_at = CURRENT_TIMESTAMP
       WHERE id = $3`,
      [transactionId, telegramPaymentId, invoiceId]
    );

    // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ SubscriptionService
    const SubscriptionService = require('./subscriptionService');
    const subscriptionResult = await SubscriptionService.createSubscription(
      invoice.user_id,
      invoice.plan_type,
      transactionId
    );

    if (!subscriptionResult.success) {
      throw new Error('Failed to create subscription');
    }

    await client.query('COMMIT');

    // ========== –î–û–ë–ê–í–õ–ï–ù–ù–´–ô –ö–û–î –î–õ–Ø –£–í–ï–î–û–ú–õ–ï–ù–ò–ô ‚¨áÔ∏è ==========
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É –æ –ø–ª–∞—Ç–µ–∂–µ
    try {
      const bot = require('../server').bot;
      
      if (!process.env.TEAM_LEAD_TELEGRAM_ID) {
        console.warn('‚ö†Ô∏è TEAM_LEAD_TELEGRAM_ID not set - skipping notification');
      } else {
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        const userResult = await db.query(
          'SELECT first_name, username, telegram_id FROM users WHERE id = $1',
          [invoice.user_id]
        );
        
        const user = userResult.rows[0];
        const userName = user?.first_name || user?.username || 'Unknown User';
        const userTgId = user?.telegram_id || 'N/A';
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        const message = 
          `üí∞ <b>–ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –ø–æ–ª—É—á–µ–Ω!</b>\n\n` +
          `üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> ${userName}\n` +
          `üÜî <b>Telegram ID:</b> ${userTgId}\n` +
          `üì¶ <b>–ü–ª–∞–Ω:</b> ${invoice.plan_type.replace('_', ' ').toUpperCase()}\n` +
          `‚≠ê <b>–°—É–º–º–∞:</b> ${invoice.amount} Stars\n` +
          `üí≥ <b>Transaction ID:</b>\n<code>${transactionId}</code>\n` +
          `üìÖ <b>–î–∞—Ç–∞:</b> ${new Date().toLocaleString('ru-RU', { 
            timeZone: 'Asia/Almaty',
            year: 'numeric',
            month: '2-digit',
            day: '2-digit',
            hour: '2-digit',
            minute: '2-digit'
          })}\n\n` +
          `‚úÖ <i>Stars –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à Telegram –∞–∫–∫–∞—É–Ω—Ç.</i>\n\n` +
          `üîó –ü—Ä–æ–≤–µ—Ä–∏—Ç—å: Telegram ‚Üí –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí Premium ‚Üí Stars`;
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await bot.sendMessage(
          process.env.TEAM_LEAD_TELEGRAM_ID,
          message,
          { parse_mode: 'HTML' }
        );
        
        console.log('‚úÖ Payment notification sent to team lead');
      }
    } catch (notifyError) {
      console.error('‚ùå Failed to send notification to team lead:', notifyError.message);
      // –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å
    }
    
    // ========== –ö–û–ù–ï–¶ –î–û–ë–ê–í–õ–ï–ù–ù–û–ì–û –ö–û–î–ê ‚¨ÜÔ∏è ==========

    console.log('Payment processed successfully:', subscriptionResult);

    return {
      success: true,
      subscription: subscriptionResult.subscription,
      invoiceId
    };
  } catch (error) {
    await client.query('ROLLBACK');
    console.error('Error processing payment:', error);
    throw error;
  } finally {
    client.release();
  }
}

  /**
   * –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ Stars —Ç–∏–º–ª–∏–¥—É
   */
  static async transferStarsToTeamLead(amount, userId) {
    try {
      console.log(`Transferring ${amount} stars to team lead`);

      // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ Stars —á–µ—Ä–µ–∑ Telegram Bot API
      // –í–ê–ñ–ù–û: API –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ Stars –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è
      
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ –∏—Å—Ç–æ—Ä–∏—é
      await db.query(
        `INSERT INTO stars_transfers (
          from_user_id, to_telegram_id, amount, status
        ) VALUES ($1, $2, $3, 'completed')`,
        [userId, TEAM_LEAD_TELEGRAM_ID, amount]
      );

      console.log('Stars transferred successfully');
    } catch (error) {
      console.error('Error transferring stars:', error);
      // –ù–µ –±—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –Ω–µ –æ—Ç–∫–∞—Ç–∏—Ç—å –≤—Å—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
   */
  static async checkPaymentStatus(invoiceId) {
    try {
      const result = await db.query(
        `SELECT 
          pi.*,
          s.plan_type as subscription_plan,
          s.is_active as subscription_active
         FROM payment_invoices pi
         LEFT JOIN subscriptions s ON s.transaction_id = pi.transaction_id
         WHERE pi.id = $1`,
        [invoiceId]
      );

      if (result.rows.length === 0) {
        return { success: false, message: 'Invoice not found' };
      }

      const invoice = result.rows[0];

      return {
        success: true,
        status: invoice.status,
        isPaid: invoice.status === 'paid',
        subscriptionActive: invoice.subscription_active || false
      };
    } catch (error) {
      console.error('Error checking payment status:', error);
      throw error;
    }
  }

  /**
   * –û—Ç–º–µ–Ω–∏—Ç—å –ø–ª–∞—Ç–µ–∂
   */
  static async cancelPayment(invoiceId) {
    try {
      await db.query(
        `UPDATE payment_invoices 
         SET status = 'cancelled', 
             cancelled_at = CURRENT_TIMESTAMP
         WHERE id = $1 AND status = 'pending'`,
        [invoiceId]
      );

      return { success: true };
    } catch (error) {
      console.error('Error cancelling payment:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static async getUserPayments(userId) {
    try {
      const result = await db.query(
        `SELECT 
          id,
          plan_type,
          amount,
          status,
          created_at,
          paid_at
         FROM payment_invoices
         WHERE user_id = $1
         ORDER BY created_at DESC
         LIMIT 20`,
        [userId]
      );

      return {
        success: true,
        payments: result.rows
      };
    } catch (error) {
      console.error('Error getting user payments:', error);
      throw error;
    }
  }
}

module.exports = TelegramStarsService;
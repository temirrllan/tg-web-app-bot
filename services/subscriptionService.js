const db = require('../config/database');

class SubscriptionService {
  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏
  static PLANS = {
    '6_months': {
      name: 'Premium for 6 Months',
      duration_months: 6,
      price_stars: 600,
      features: ['Unlimited habits', 'Advanced statistics', 'Priority support']
    },
    '1_year': {
      name: 'Premium for 1 Year',
      duration_months: 12,
      price_stars: 350,
      features: ['Unlimited habits', 'Advanced statistics', 'Priority support', 'Save 42%']
    },
    'lifetime': {
      name: 'Lifetime Premium',
      duration_months: null, // –±–µ—Å—Å—Ä–æ—á–Ω–∞—è
      price_stars: 1500,
      features: ['Unlimited habits', 'Advanced statistics', 'Priority support', 'One-time payment', 'Forever access']
    },
    'trial_7_days': {
      name: 'Free Trial (7 days)',
      duration_days: 7,
      price_stars: 0,
      features: ['Unlimited habits for 7 days', 'Try all premium features']
    }
  };

  // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
  static async createSubscription(userId, planType, transactionId = null) {
    const client = await db.getClient();
    
    try {
      await client.query('BEGIN');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–ª–∞–Ω
      const plan = this.PLANS[planType];
      if (!plan) {
        throw new Error(`Invalid plan type: ${planType}`);
      }
      
      console.log(`üìù Creating subscription: User ${userId}, Plan ${planType}`);
      
      // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
      await client.query(
        'UPDATE subscriptions SET is_active = false, cancelled_at = CURRENT_TIMESTAMP WHERE user_id = $1 AND is_active = true',
        [userId]
      );
      
      // –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è
      let expiresAt = null;
      const startedAt = new Date();
      
      if (plan.duration_months) {
        expiresAt = new Date(startedAt);
        expiresAt.setMonth(expiresAt.getMonth() + plan.duration_months);
      } else if (plan.duration_days) {
        expiresAt = new Date(startedAt);
        expiresAt.setDate(expiresAt.getDate() + plan.duration_days);
      }
      // –ï—Å–ª–∏ –Ω–∏ —Ç–æ, –Ω–∏ –¥—Ä—É–≥–æ–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ - —ç—Ç–æ lifetime –ø–æ–¥–ø–∏—Å–∫–∞
      
      console.log(`üìÖ Subscription period: ${startedAt.toISOString()} to ${expiresAt ? expiresAt.toISOString() : 'LIFETIME'}`);
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
      const result = await client.query(
        `INSERT INTO subscriptions (
          user_id, plan_type, plan_name, price_stars, 
          started_at, expires_at, is_active, is_trial,
          transaction_id, payment_method
        ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
        RETURNING *`,
        [
          userId,
          planType,
          plan.name,
          plan.price_stars || 0,
          startedAt,
          expiresAt,
          true,
          planType.includes('trial'),
          transactionId,
          transactionId ? 'telegram_stars' : 'simulated'
        ]
      );
      
      const subscription = result.rows[0];
      console.log(`‚úÖ Subscription created with ID: ${subscription.id}`);
      
      // –í–ê–ñ–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º –í–°–ï –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ users
      const updateUserResult = await client.query(
        `UPDATE users 
         SET 
           is_premium = true, 
           subscription_type = $2,
           subscription_expires_at = $3
         WHERE id = $1
         RETURNING id, is_premium, subscription_type, subscription_expires_at`,
        [userId, planType, expiresAt]
      );
      
      if (updateUserResult.rows.length === 0) {
        throw new Error('Failed to update user premium status');
      }
      
      console.log(`‚úÖ User ${userId} updated:`, {
        is_premium: updateUserResult.rows[0].is_premium,
        subscription_type: updateUserResult.rows[0].subscription_type,
        subscription_expires_at: updateUserResult.rows[0].subscription_expires_at
      });
      
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
      await client.query(
        `INSERT INTO subscription_history (
          subscription_id, user_id, action, plan_type, price_stars
        ) VALUES ($1, $2, 'created', $3, $4)`,
        [subscription.id, userId, planType, plan.price_stars || 0]
      );
      
      await client.query('COMMIT');
      
      console.log(`‚úÖ Subscription fully activated for user ${userId}`);
      
      return {
        success: true,
        subscription,
        user: updateUserResult.rows[0],
        message: `${plan.name} activated successfully!`
      };
    } catch (error) {
      await client.query('ROLLBACK');
      console.error('‚ùå Error creating subscription:', error);
      throw error;
    } finally {
      client.release();
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  static async checkUserSubscription(userId) {
    try {
      console.log(`üîç Checking subscription for user ${userId}`);
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–¥–ø–∏—Å–∫–∏ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
      const result = await db.query(
        `SELECT 
          u.id,
          u.is_premium,
          u.subscription_type,
          u.subscription_expires_at,
          s.id as subscription_id,
          s.plan_type,
          s.plan_name,
          s.started_at,
          s.expires_at,
          s.is_active as subscription_active,
          s.is_trial,
          (SELECT COUNT(*) FROM habits WHERE user_id = $1 AND is_active = true) as habit_count
         FROM users u
         LEFT JOIN subscriptions s ON s.user_id = u.id AND s.is_active = true
         WHERE u.id = $1`,
        [userId]
      );
      
      if (result.rows.length === 0) {
        console.log(`‚ùå User ${userId} not found`);
        return {
          hasSubscription: false,
          isPremium: false,
          habitCount: 0,
          limit: 3,
          canCreateMore: true
        };
      }
      
      const data = result.rows[0];
      const now = new Date();
      
      console.log(`üìä User ${userId} subscription data:`, {
        is_premium: data.is_premium,
        subscription_type: data.subscription_type,
        subscription_expires_at: data.subscription_expires_at,
        has_active_subscription: !!data.subscription_id
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞
      let isValid = false;
      let needsUpdate = false;
      
      // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ç–¥–∞–µ–º –¥–∞–Ω–Ω—ã–º –∏–∑ —Ç–∞–±–ª–∏—Ü—ã subscriptions –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
      if (data.subscription_id) {
        if (data.expires_at === null) {
          // Lifetime –ø–æ–¥–ø–∏—Å–∫–∞
          isValid = true;
        } else if (data.expires_at) {
          isValid = new Date(data.expires_at) > now;
          if (!isValid) {
            needsUpdate = true;
          }
        }
        
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç
        if (isValid && (!data.is_premium || data.subscription_type !== data.plan_type)) {
          console.log(`‚ö†Ô∏è Syncing user data with active subscription`);
          await db.query(
            `UPDATE users 
             SET is_premium = true, 
                 subscription_type = $2,
                 subscription_expires_at = $3
             WHERE id = $1`,
            [userId, data.plan_type, data.expires_at]
          );
          data.is_premium = true;
          data.subscription_type = data.plan_type;
          data.subscription_expires_at = data.expires_at;
        }
      } else if (data.is_premium && data.subscription_expires_at) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –¥–∞–Ω–Ω—ã–º –∏–∑ users —Ç–∞–±–ª–∏—Ü—ã
        if (data.subscription_expires_at === null) {
          isValid = true;
        } else {
          isValid = new Date(data.subscription_expires_at) > now;
          if (!isValid) {
            needsUpdate = true;
          }
        }
      }
      
      // –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞, –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –µ—ë
      if (needsUpdate) {
        console.log(`‚è∞ Subscription expired for user ${userId}, deactivating...`);
        if (data.subscription_id) {
          await this.expireSubscription(userId, data.subscription_id);
        } else {
          // –ü—Ä–æ—Å—Ç–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å
          await db.query(
            `UPDATE users 
             SET is_premium = false, 
                 subscription_type = NULL,
                 subscription_expires_at = NULL
             WHERE id = $1`,
            [userId]
          );
        }
        data.is_premium = false;
        data.subscription_type = null;
        data.subscription_expires_at = null;
        isValid = false;
      }
      
      const isPremium = data.is_premium && isValid;
      const limit = isPremium ? 999 : 3;
      const habitCount = parseInt(data.habit_count);
      
      console.log(`‚úÖ User ${userId} status: Premium=${isPremium}, Habits=${habitCount}/${limit}`);
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      const subscriptionData = {
        hasSubscription: !!data.subscription_id || (data.is_premium && data.subscription_type),
        subscription: null,
        isPremium,
        habitCount,
        limit,
        canCreateMore: habitCount < limit
      };
      
      // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
      if ((data.subscription_id || data.subscription_type) && isValid) {
        subscriptionData.subscription = {
          id: data.subscription_id,
          planType: data.plan_type || data.subscription_type,
          planName: data.plan_name || this.PLANS[data.subscription_type]?.name,
          startsAt: data.started_at,
          expiresAt: data.expires_at || data.subscription_expires_at,
          isActive: isValid,
          isTrial: data.is_trial || false,
          daysLeft: (data.expires_at || data.subscription_expires_at) ? 
            Math.ceil(((new Date(data.expires_at || data.subscription_expires_at)) - now) / (1000 * 60 * 60 * 24)) : null
        };
      }
      
      return subscriptionData;
    } catch (error) {
      console.error('‚ùå Error checking subscription:', error);
      return {
        hasSubscription: false,
        isPremium: false,
        habitCount: 0,
        limit: 3,
        canCreateMore: true,
        error: error.message
      };
    }
  }
  
  // –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–µ–∫—à—É—é –ø–æ–¥–ø–∏—Å–∫—É
  static async expireSubscription(userId, subscriptionId) {
    const client = await db.getClient();
    
    try {
      await client.query('BEGIN');
      
      console.log(`‚è∞ Expiring subscription ${subscriptionId} for user ${userId}`);
      
      // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
      await client.query(
        'UPDATE subscriptions SET is_active = false, cancelled_at = CURRENT_TIMESTAMP WHERE id = $1',
        [subscriptionId]
      );
      
      // –í–ê–ñ–ù–û: –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await client.query(
        `UPDATE users 
         SET is_premium = false, 
             subscription_type = NULL,
             subscription_expires_at = NULL
         WHERE id = $1`,
        [userId]
      );
      
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
      await client.query(
        `INSERT INTO subscription_history (
          subscription_id, user_id, action
        ) VALUES ($1, $2, 'expired')`,
        [subscriptionId, userId]
      );
      
      await client.query('COMMIT');
      
      console.log(`‚úÖ Subscription expired for user ${userId}`);
    } catch (error) {
      await client.query('ROLLBACK');
      console.error('‚ùå Error expiring subscription:', error);
    } finally {
      client.release();
    }
  }
  
  // –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
  static async cancelSubscription(userId) {
    const client = await db.getClient();
    
    try {
      await client.query('BEGIN');
      
      console.log(`üö´ Cancelling subscription for user ${userId}`);
      
      // –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
      const subResult = await client.query(
        'SELECT id, plan_type FROM subscriptions WHERE user_id = $1 AND is_active = true',
        [userId]
      );
      
      if (subResult.rows.length === 0) {
        throw new Error('No active subscription found');
      }
      
      const subscription = subResult.rows[0];
      
      // –û—Ç–º–µ–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
      await client.query(
        `UPDATE subscriptions 
         SET is_active = false, 
             auto_renew = false,
             cancelled_at = CURRENT_TIMESTAMP
         WHERE id = $1`,
        [subscription.id]
      );
      
      // –í–ê–ñ–ù–û: –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await client.query(
        `UPDATE users 
         SET is_premium = false,
             subscription_type = NULL,
             subscription_expires_at = NULL
         WHERE id = $1`,
        [userId]
      );
      
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
      await client.query(
        `INSERT INTO subscription_history (
          subscription_id, user_id, action, plan_type
        ) VALUES ($1, $2, 'cancelled', $3)`,
        [subscription.id, userId, subscription.plan_type]
      );
      
      await client.query('COMMIT');
      
      console.log(`‚úÖ Subscription cancelled for user ${userId}`);
      
      return {
        success: true,
        message: 'Subscription cancelled successfully'
      };
    } catch (error) {
      await client.query('ROLLBACK');
      console.error('‚ùå Error cancelling subscription:', error);
      throw error;
    } finally {
      client.release();
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–µ–∫—à–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ (–∑–∞–ø—É—Å–∫–∞—Ç—å –ø–æ –∫—Ä–æ–Ω—É)
  static async checkExpiredSubscriptions() {
    try {
      console.log('üîç Checking for expired subscriptions...');
      
      const result = await db.query(
        `SELECT 
          s.id, 
          s.user_id,
          s.plan_type,
          s.expires_at
         FROM subscriptions s
         WHERE s.is_active = true 
         AND s.expires_at IS NOT NULL 
         AND s.expires_at < CURRENT_TIMESTAMP`
      );
      
      console.log(`üìä Found ${result.rows.length} expired subscriptions`);
      
      for (const sub of result.rows) {
        console.log(`Processing expired subscription for user ${sub.user_id}`);
        await this.expireSubscription(sub.user_id, sub.id);
      }
      
      // –¢–∞–∫–∂–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≥–¥–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç
      const syncResult = await db.query(
        `SELECT u.id, u.subscription_type, s.plan_type, s.expires_at
         FROM users u
         LEFT JOIN subscriptions s ON s.user_id = u.id AND s.is_active = true
         WHERE u.is_premium = true
         AND (
           (s.id IS NULL AND u.subscription_type IS NULL) OR
           (s.id IS NOT NULL AND u.subscription_type != s.plan_type)
         )`
      );
      
      if (syncResult.rows.length > 0) {
        console.log(`üìä Found ${syncResult.rows.length} users needing sync`);
        
        for (const user of syncResult.rows) {
          if (user.plan_type) {
            // –ï—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º
            await db.query(
              `UPDATE users 
               SET subscription_type = $2,
                   subscription_expires_at = $3
               WHERE id = $1`,
              [user.id, user.plan_type, user.expires_at]
            );
            console.log(`‚úÖ Synced user ${user.id} with subscription ${user.plan_type}`);
          } else {
            // –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–º–∏—É–º
            await db.query(
              `UPDATE users 
               SET is_premium = false,
                   subscription_type = NULL,
                   subscription_expires_at = NULL
               WHERE id = $1`,
              [user.id]
            );
            console.log(`‚úÖ Reset premium for user ${user.id} (no active subscription)`);
          }
        }
      }
      
      return result.rows.length + syncResult.rows.length;
    } catch (error) {
      console.error('‚ùå Error checking expired subscriptions:', error);
      return 0;
    }
  }
}

module.exports = SubscriptionService;